{"version":3,"sources":["drag-drop-polyfill.ts"],"names":["detectFeatures","features","dragEvents","document","documentElement","draggable","touchEvents","userAgentSupportingNativeDnD","undefined","isBlinkEngine","window","test","navigator","userAgent","supportsPassiveEventListener","supportsPassiveEventListeners","opts","Object","defineProperty","get","addEventListener","e","Initialize","override","keys","forEach","key","config","forceApply","detectedFeatures","supportsPassive","addDocumentListener","onTouchstart","activeDragOperation","dragTarget","tryFindDraggableTarget","DragOperationController","dragOperationEnded","err","event","el","target","getAttribute","parentNode","body","_config","state","defaultActionOverride","defaultPrevented","ev","handler","passive","removeDocumentListener","removeEventListener","average","array","length","reduce","s","v","isDOMElement","object","tagName","isTouchIdentifierContainedInTouchEvent","newTouch","touchIdentifier","i","changedTouches","identifier","createDragEventFromTouch","targetElement","type","cancelable","dataTransfer","relatedTarget","touch","dndEvent","Event","bubbles","screenX","screenY","clientX","clientY","pageX","pageY","targetRect","getBoundingClientRect","offsetX","left","offsetY","top","updateCentroidCoordinatesOfTouchesIn","coordinateProp","outPoint","pageXs","pageYs","touches","push","x","y","prepareNodeCopyAsDragImage","srcNode","dstNode","nodeType","cs","getComputedStyle","csName","style","setProperty","getPropertyValue","getPropertyPriority","pointerEvents","removeAttribute","hasChildNodes","childNodes","createDragImage","sourceNode","dragImage","cloneNode","position","zIndex","classList","add","CLASS_PREFIX","extractTransformStyles","TRANSFORM_CSS_VENDOR_PREFIXES","map","prefix","transform","replace","translateDragImage","pnt","originalTransforms","offset","centerOnCoordinates","parseInt","offsetWidth","offsetHeight","translate","transformProp","applyDragImageSnapback","sourceEl","dragImageTransforms","transitionEndCb","visibility","display","rect","scrollLeft","scrollTop","marginLeft","marginTop","csDragImage","durationInS","parseFloat","transitionDuration","delayInS","transitionDelay","durationInMs","Math","round","setTimeout","determineDropEffect","effectAllowed","ALLOWED_EFFECTS","DROP_EFFECTS","indexOf","dispatchDragEvent","dragEvent","touchEvent","dataStore","leaveEvt","defaultView","cancelled","dispatchEvent","_mode","determineDragOperation","dropEffect","iterationInterval","_initialEvent","_sourceNode","_dragOperationEndedCb","this","_dragOperationState","_immediateUserSelection","_currentDropTarget","_lastTouchEvent","_initialTouch","_touchMoveHandler","_onTouchMove","bind","_touchEndOrCancelHandler","_onTouchEndOrCancel","prototype","_setup","_this","_currentDragOperation","_dragDataStore","D","F","g","G","_currentHotspotCoordinates","_dragImagePageCoordinates","dragImageSrc","_dataTransfer","DataTransfer","element","_dragImageOffset","_cleanup","_dragImage","_dragImageTransforms","dragImageOffset","dragImageCenterOnTouch","width","height","appendChild","_iterationIntervalId","setInterval","_iterationLock","_dragAndDropProcessModelIteration","clearInterval","removeChild","startDrag","dragStartConditionOverride","preventDefault","dragImageTranslateOverride","handledDragImageTranslate_1","previousDragOperation","dragCancelled","_dragOperationEnded","_finishDragOperation","newUserSelection","elementFromPoint","previousTargetElement","_effectAllowed","remove","currentDragOperationClass","contains","dragFailed","_dataStore","_setDragImageHandler","_dropEffect","freeze","_types","setData","data","Error","_data","getData","clearData","format","index","splice","setDragImage","image","value","exports","DragDropPolyfill","DEBUG"],"mappings":"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","file":"drag-drop-polyfill.min.js","sourcesContent":["// debug mode, which will highlight drop target, immediate user selection and events fired as you interact.\nlet DEBUG:boolean;\n\n\n//TODO temporary definition of new event listener signature, should be in lib.d.ts\n// See https://github.com/Microsoft/TypeScript/issues/9548\n\ninterface WhatWGEventListenerArgs {\n    capture?: boolean;\n}\n\ninterface WhatWGAddEventListenerArgs extends WhatWGEventListenerArgs {\n    passive?: boolean;\n    once?: boolean;\n}\n\ntype WhatWGAddEventListener = (\n    type: string,\n    listener: (event:Event) => void,\n    options?: WhatWGAddEventListenerArgs\n) => void;\n\n\n//<editor-fold desc=\"feature detection\">\n\ninterface DetectedFeatures {\n    draggable:boolean;\n    dragEvents:boolean;\n    touchEvents:boolean;\n    userAgentSupportingNativeDnD:boolean;\n}\n\nfunction detectFeatures():DetectedFeatures {\n\n    let features:DetectedFeatures = {\n        dragEvents: (\"ondragstart\" in document.documentElement),\n        draggable: (\"draggable\" in document.documentElement),\n        touchEvents: (\"ontouchstart\" in document.documentElement),\n        userAgentSupportingNativeDnD: undefined\n    };\n\n    const isBlinkEngine = !!((<any>window).chrome) || /chrome/i.test( navigator.userAgent );\n\n    features.userAgentSupportingNativeDnD = !(\n        // if is mobile safari or android browser -> no native dnd\n        (/iPad|iPhone|iPod|Android/.test( navigator.userAgent ))\n        || // OR\n        //if is blink(chrome/opera) with touch events enabled -> no native dnd\n        (isBlinkEngine && features.touchEvents)\n    );\n\n    if( DEBUG ) {\n        Object.keys( features ).forEach( function( key ) {\n            console.log( \"dnd-poly: detected feature '\" + key + \" = \" + features[ key ] + \"'\" );\n        } );\n    }\n\n    return features;\n}\n\nlet supportsPassive:boolean;\n\nfunction supportsPassiveEventListener():boolean {\n\n    let supportsPassiveEventListeners = false;\n\n    // reference https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    try {\n        let opts = Object.defineProperty({}, \"passive\", {\n            get: function() {\n                supportsPassiveEventListeners = true;\n            }\n        });\n        window.addEventListener(\"test\", null, opts);\n    }\n    // tslint:disable-next-line:no-empty\n    catch (e) {}\n\n    return supportsPassiveEventListeners;\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"public api\">\n\n// function signature for the dragImageTranslateOverride hook\nexport type DragImageTranslateOverrideFn = (\n    // corresponding touchmove event\n    event:TouchEvent,\n    // the processed touch event viewport coordinates\n    hoverCoordinates:Point,\n    // the element under the calculated touch coordinates\n    hoveredElement:HTMLElement,\n    // callback for updating the drag image offset\n    translateDragImageFn:( offsetX:number, offsetY:number ) => void\n) => void;\n\nexport interface Config {\n    // flag to force the polyfill being applied and not rely on internal feature detection\n    forceApply?:boolean;\n    // useful for when you want the default drag image but still want to apply\n    // some static offset from touch coordinates to drag image coordinates\n    // defaults to (0,0)\n    dragImageOffset?:Point;\n    // if the dragImage shall be centered on the touch coordinates\n    // defaults to false\n    dragImageCenterOnTouch?:boolean;\n    // the drag and drop operation involves some processing. here you can specify in what interval this processing takes place.\n    // defaults to 150ms\n    iterationInterval?:number;\n    // hook for custom logic that decides if a drag operation should start\n    dragStartConditionOverride?:( event:TouchEvent ) => boolean;\n    // hook for custom logic that can manipulate the drag image translate offset\n    dragImageTranslateOverride?:DragImageTranslateOverrideFn;\n    // hook for custom logic that can override the default action based on the original touch event when the drag never started\n    // be sure to call event.preventDefault() if handling the default action in the override to prevent the browser default.\n    defaultActionOverride?:( event:TouchEvent ) => void;\n}\n\n// default config\nconst config:Config = {\n    iterationInterval: 150,\n};\n\nfunction Initialize( override?:Config ) {\n\n    if( override ) {\n        // overwrite default config with user config\n        Object.keys( override ).forEach( function( key ) {\n            config[ key ] = override[ key ];\n        } );\n    }\n\n    // only do feature detection when config does not force apply the polyfill\n    if( !config.forceApply ) {\n\n        // feature/browser detection\n        const detectedFeatures = detectFeatures();\n\n        // check if native drag and drop support is there\n        if( detectedFeatures.userAgentSupportingNativeDnD\n            && detectedFeatures.draggable\n            && detectedFeatures.dragEvents ) {\n            // no polyfilling required\n            return;\n        }\n    }\n\n    console.log( \"dnd-poly: Applying mobile drag and drop polyfill.\" );\n\n    supportsPassive = supportsPassiveEventListener();\n\n    // add listeners suitable for detecting a potential drag operation\n    addDocumentListener( \"touchstart\", onTouchstart, false );\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"drag operation start/end\">\n\n// reference the currently active drag operation\nlet activeDragOperation:DragOperationController;\n\n/**\n * event handler listening for initial events that possibly start a drag and drop operation.\n */\nfunction onTouchstart( e:TouchEvent ) {\n\n    console.log( \"dnd-poly: global touchstart\" );\n\n    // From the moment that the user agent is to initiate the drag-and-drop operation,\n    // until the end of the drag-and-drop operation, device input events (e.g. mouse and keyboard events) must be suppressed.\n\n    // only allow one drag operation at a time\n    if( activeDragOperation ) {\n        console.log( \"dnd-poly: drag operation already active\" );\n        return;\n    }\n\n    let dragTarget = tryFindDraggableTarget( e );\n\n    // If there is no such element, then nothing is being dragged; abort these\n    // steps, the drag-and-drop operation is never started.\n    if( !dragTarget ) {\n        return;\n    }\n\n    try {\n        activeDragOperation = new DragOperationController( e, config, <HTMLElement>dragTarget, dragOperationEnded );\n    }\n    catch( err ) {\n        dragOperationEnded( config, e, DragOperationState.CANCELLED );\n        // rethrow exception after cleanup\n        throw err;\n    }\n}\n\n/**\n * Search for a possible draggable item upon an event that can initialize a drag operation.\n */\nfunction tryFindDraggableTarget( event:TouchEvent ):Element {\n\n    //1. Determine what is being dragged, as follows:\n\n    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n    // If the drag operation was invoked on a selection, then it is the selection that is being dragged.\n    //if( (<Element>event.target).nodeType === 3 ) {\n    //\n    //    config.log( \"drag on text\" );\n    //    return <Element>event.target;\n    //}\n    //Otherwise, if the drag operation was invoked on a Document, it is the first element, going up the ancestor chain, starting at the node that the\n    // user tried to drag, that has the IDL attribute draggable set to true.\n    //else {\n\n    let el = <HTMLElement>event.target;\n\n    do {\n        if( el.draggable === false ) {\n            continue;\n        }\n        if( el.getAttribute && el.getAttribute( \"draggable\" ) === \"true\" ) {\n            return el;\n        }\n    } while( (el = <HTMLElement>el.parentNode) && el !== document.body );\n}\n\n/**\n * Implements callback invoked when a drag operation has ended or crashed.\n */\nfunction dragOperationEnded( _config:Config, event:TouchEvent, state:DragOperationState ) {\n\n    // we need to make the default action happen only when no drag operation took place\n    if( state === DragOperationState.POTENTIAL ) {\n\n        console.log( \"dnd-poly: Drag never started. Last event was \" + event.type );\n\n        // when lifecycle hook is present\n        if( _config.defaultActionOverride ) {\n\n            try {\n\n                _config.defaultActionOverride( event );\n\n                if( event.defaultPrevented ) {\n\n                    console.log( \"dnd-poly: defaultActionOverride has taken care of triggering the default action. preventing default on original event\" );\n                }\n\n            }\n            catch( e ) {\n\n                console.log( \"dnd-poly: error in defaultActionOverride: \" + e );\n            }\n        }\n    }\n\n    // reset drag operation container\n    activeDragOperation = null;\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"drag operation\">\n\n/**\n * For tracking the different states of a drag operation.\n */\nconst enum DragOperationState {\n    // initial state of a controller, if no movement is detected the operation ends with this state\n    POTENTIAL,\n    // after movement is detected the drag operation starts and keeps this state until it ends\n    STARTED,\n    // when the drag operation ended normally\n    ENDED,\n    // when the drag operation ended with a cancelled input event\n    CANCELLED\n}\n\n// contains all possible values of the effectAllowed property\nconst enum EFFECT_ALLOWED {\n    NONE      = 0,\n    COPY      = 1,\n    COPY_LINK = 2,\n    COPY_MOVE = 3,\n    LINK      = 4,\n    LINK_MOVE = 5,\n    MOVE      = 6,\n    ALL       = 7\n}\nconst ALLOWED_EFFECTS = [ \"none\", \"copy\", \"copyLink\", \"copyMove\", \"link\", \"linkMove\", \"move\", \"all\" ];\n// contains all possible values of the dropEffect property\nconst enum DROP_EFFECT {\n    NONE = 0,\n    COPY = 1,\n    MOVE = 2,\n    LINK = 3,\n}\nconst DROP_EFFECTS = [ \"none\", \"copy\", \"move\", \"link\" ];\n\n// cross-browser css transform property prefixes\nconst TRANSFORM_CSS_VENDOR_PREFIXES = [ \"\", \"-webkit-\" ];\n// css classes\nconst CLASS_PREFIX = \"dnd-poly-\";\nconst CLASS_DRAG_IMAGE = CLASS_PREFIX + \"drag-image\";\nconst CLASS_DRAG_IMAGE_SNAPBACK = CLASS_PREFIX + \"snapback\";\nconst CLASS_DRAG_OPERATION_ICON = CLASS_PREFIX + \"icon\";\n\n/**\n * Aims to implement the HTML5 d'n'd spec (https://html.spec.whatwg.org/multipage/interaction.html#dnd) as close as it can get.\n * Note that all props that are private should start with an underscore to enable better minification.\n *\n * TODO remove lengthy spec comments in favor of short references to the spec\n */\nclass DragOperationController {\n\n    private _dragOperationState:DragOperationState = DragOperationState.POTENTIAL;\n\n    private _dragImage:HTMLElement;\n    private _dragImageTransforms:string[];\n    private _dragImagePageCoordinates:Point; // the current page coordinates of the dragImage\n    private _dragImageOffset:Point; // offset of the drag image relative to the coordinates\n\n    private _currentHotspotCoordinates:Point;    // the point relative to viewport for determining the immediate user selection\n\n    private _immediateUserSelection:HTMLElement = null;  // the element the user currently hovers while dragging\n    private _currentDropTarget:HTMLElement = null;   // the element that was selected as a valid drop target by the d'n'd operation\n\n    private _dragDataStore:DragDataStore;\n    private _dataTransfer:DataTransfer;\n\n    private _currentDragOperation:string;    // the current drag operation set according to the d'n'd processing model\n\n    private _initialTouch:Touch;  // the identifier for the touch that initiated the drag operation\n    private _touchMoveHandler:EventListener;\n    private _touchEndOrCancelHandler:EventListener;\n    private _lastTouchEvent:TouchEvent;\n\n    private _iterationLock:boolean;\n    private _iterationIntervalId:number;\n\n    constructor( private _initialEvent:TouchEvent,\n                 private _config:Config,\n                 private _sourceNode:HTMLElement,\n                 private _dragOperationEndedCb:( config:Config, event:TouchEvent, state:DragOperationState ) => void ) {\n\n        console.log( \"dnd-poly: setting up potential drag operation..\" );\n\n        this._lastTouchEvent = _initialEvent;\n        this._initialTouch = _initialEvent.changedTouches[ 0 ];\n\n        // create bound event listeners\n        this._touchMoveHandler = this._onTouchMove.bind( this );\n        this._touchEndOrCancelHandler = this._onTouchEndOrCancel.bind( this );\n        addDocumentListener( \"touchmove\", this._touchMoveHandler, false );\n        addDocumentListener( \"touchend\", this._touchEndOrCancelHandler, false );\n        addDocumentListener( \"touchcancel\", this._touchEndOrCancelHandler, false );\n\n        // the only thing we do is setup the touch listeners. if drag will really start is decided in touch move handler.\n\n        //<spec>\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 3. Establish which DOM node is the source node, as follows:\n        // If it is a selection that is being dragged, then the source node is the text node that the user started the drag on (typically the text node\n        // that the user originally clicked). If the user did not specify a particular node, for example if the user just told the user agent to begin\n        // a drag of \"the selection\", then the source node is the first text node containing a part of the selection.  Otherwise, if it is an element\n        // that is being dragged, then the source node is the element that is being dragged.  Otherwise, the source node is part of another document or\n        // application. When this specification requires that an event be dispatched at the source node in this case, the user agent must instead\n        // follow the platform-specific conventions relevant to that situation.\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 4. Determine the list of dragged nodes, as follows:\n\n        //    If it is a selection that is being dragged, then the list of dragged nodes contains, in tree order, every node that is partially or\n        // completely included in the selection (including all their ancestors).\n\n        //    Otherwise, the list of dragged nodes contains only the source node, if any.\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 5. If it is a selection that is being dragged, then add an item to the drag data store item list, with its properties set as follows:\n\n        //The drag data item type string\n        //\"text/plain\"\n        //The drag data item kind\n        //Plain Unicode string\n        //The actual data\n        //The text of the selection\n        //Otherwise, if any files are being dragged, then add one item per file to the drag data store item list, with their properties set as follows:\n        //\n        //The drag data item type string\n        //The MIME type of the file, if known, or \"application/octet-stream\" otherwise.\n        //    The drag data item kind\n        //File\n        //The actual data\n        //The file's contents and name.\n        //Dragging files can currently only happen from outside a browsing context, for example from a file system manager application.\n        //\n        //    If the drag initiated outside of the application, the user agent must add items to the drag data store item list as appropriate for the data\n        // being dragged, honoring platform conventions where appropriate; however, if the platform conventions do not use MIME types to label dragged\n        // data, the user agent must make a best-effort attempt to map the types to MIME types, and, in any case, all the drag data item type strings must\n        // be converted to ASCII lowercase.  Perform drag-and-drop initialization steps defined in any other applicable specifications.\n\n        //</spec>\n    }\n\n    //<editor-fold desc=\"setup/teardown\">\n\n    /**\n     * Setup dragImage, input listeners and the drag\n     * and drop process model iteration interval.\n     */\n    private _setup():boolean {\n        console.log( \"dnd-poly: starting drag and drop operation\" );\n\n        this._dragOperationState = DragOperationState.STARTED;\n\n        this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n\n        this._dragDataStore = {\n            _data: {},\n            _effectAllowed: undefined,\n            _mode: DragDataStoreMode.PROTECTED,\n            _types: [],\n        };\n\n        this._currentHotspotCoordinates = {\n            x: null,\n            y: null\n        };\n\n        this._dragImagePageCoordinates = {\n            x: null,\n            y: null\n        };\n\n        let dragImageSrc:HTMLElement = this._sourceNode;\n\n        this._dataTransfer = new DataTransfer( this._dragDataStore, ( element:HTMLElement, x:number, y:number ) => {\n\n            dragImageSrc = element;\n\n            if( typeof x === \"number\" || typeof y === \"number\" ) {\n                this._dragImageOffset = {\n                    x: x || 0,\n                    y: y || 0\n                };\n            }\n        } );\n\n        // 9. Fire a DND event named dragstart at the source node.\n        this._dragDataStore._mode = DragDataStoreMode.READWRITE;\n        this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n        if( dispatchDragEvent( \"dragstart\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) ) {\n            console.log( \"dnd-poly: dragstart cancelled\" );\n            // dragstart has been prevented -> cancel d'n'd\n            this._dragOperationState = DragOperationState.CANCELLED;\n            this._cleanup();\n            return false;\n        }\n\n        updateCentroidCoordinatesOfTouchesIn( \"page\", this._lastTouchEvent, this._dragImagePageCoordinates );\n        this._dragImage = createDragImage( dragImageSrc );\n        this._dragImageTransforms = extractTransformStyles( this._dragImage );\n\n        if( !this._dragImageOffset ) {\n\n            // apply specific offset\n            if( this._config.dragImageOffset ) {\n\n                this._dragImageOffset = {\n                    x: this._config.dragImageOffset.x,\n                    y: this._config.dragImageOffset.y\n                };\n            }\n            // center drag image on touch coordinates\n            else if( this._config.dragImageCenterOnTouch ) {\n\n                const cs = getComputedStyle( dragImageSrc );\n                this._dragImageOffset = {\n                    x: 0 - parseInt( cs.marginLeft, 10 ),\n                    y: 0 - parseInt( cs.marginTop, 10 )\n                };\n            }\n            // by default initialize drag image offset the same as desktop\n            else {\n\n                const targetRect = dragImageSrc.getBoundingClientRect();\n                const cs = getComputedStyle( dragImageSrc );\n                this._dragImageOffset = {\n                    x: targetRect.left - this._initialTouch.clientX - parseInt( cs.marginLeft, 10 ) + targetRect.width / 2,\n                    y: targetRect.top - this._initialTouch.clientY - parseInt( cs.marginTop, 10 ) + targetRect.height / 2\n                };\n            }\n        }\n\n        translateDragImage( this._dragImage, this._dragImagePageCoordinates, this._dragImageTransforms, this._dragImageOffset, this._config.dragImageCenterOnTouch );\n        document.body.appendChild( this._dragImage );\n\n        // 10. Initiate the drag-and-drop operation in a manner consistent with platform conventions, and as described below.\n        this._iterationIntervalId = setInterval( () => {\n\n            // If the user agent is still performing the previous iteration of the sequence (if any) when the next iteration becomes due,\n            // abort these steps for this iteration (effectively \"skipping missed frames\" of the drag-and-drop operation).\n            if( this._iterationLock ) {\n                console.log( \"dnd-poly: iteration skipped because previous iteration hast not yet finished.\" );\n                return;\n            }\n            this._iterationLock = true;\n\n            this._dragAndDropProcessModelIteration();\n\n            this._iterationLock = false;\n        }, this._config.iterationInterval );\n\n        return true;\n    }\n\n    private _cleanup() {\n\n        console.log( \"dnd-poly: cleanup\" );\n\n        if( this._iterationIntervalId ) {\n            clearInterval( this._iterationIntervalId );\n            this._iterationIntervalId = null;\n        }\n\n        removeDocumentListener( \"touchmove\", this._touchMoveHandler );\n        removeDocumentListener( \"touchend\", this._touchEndOrCancelHandler );\n        removeDocumentListener( \"touchcancel\", this._touchEndOrCancelHandler );\n\n        if( this._dragImage ) {\n            this._dragImage.parentNode.removeChild( this._dragImage );\n            this._dragImage = null;\n        }\n\n        this._dragOperationEndedCb( this._config, this._lastTouchEvent, this._dragOperationState );\n    }\n\n    //</editor-fold>\n\n    //<editor-fold desc=\"touch handlers\">\n\n    private _onTouchMove( event:TouchEvent ) {\n\n        // filter unrelated touches\n        if( isTouchIdentifierContainedInTouchEvent( event, this._initialTouch.identifier ) === false ) {\n            return;\n        }\n\n        // update the reference to the last received touch event\n        this._lastTouchEvent = event;\n\n        // drag operation did not start yet but on movement it should start\n        if( this._dragOperationState === DragOperationState.POTENTIAL ) {\n\n            let startDrag:boolean;\n\n            // is a lifecycle hook present?\n            if( this._config.dragStartConditionOverride ) {\n\n                try {\n                    startDrag = this._config.dragStartConditionOverride( event );\n                }\n                catch( e ) {\n                    console.error( \"dnd-poly: error in dragStartConditionOverride hook: \" + e );\n                    startDrag = false;\n                }\n            }\n            else {\n\n                // by default only allow a single moving finger to initiate a drag operation\n                startDrag = (event.touches.length === 1);\n            }\n\n            if( !startDrag ) {\n\n                this._cleanup();\n                return;\n            }\n\n            // setup will return true when drag operation starts\n            if( this._setup() === true ) {\n\n                // prevent scrolling when drag operation starts\n                this._initialEvent.preventDefault();\n                event.preventDefault();\n            }\n\n            return;\n        }\n\n        console.log( \"dnd-poly: moving draggable..\" );\n\n        // we emulate d'n'd so we dont want any defaults to apply\n        event.preventDefault();\n\n        // populate shared coordinates from touch event\n        updateCentroidCoordinatesOfTouchesIn( \"client\", event, this._currentHotspotCoordinates );\n        updateCentroidCoordinatesOfTouchesIn( \"page\", event, this._dragImagePageCoordinates );\n\n        if( this._config.dragImageTranslateOverride ) {\n\n            try {\n\n                let handledDragImageTranslate = false;\n\n                this._config.dragImageTranslateOverride(\n                    event,\n                    {\n                        x: this._currentHotspotCoordinates.x,\n                        y: this._currentHotspotCoordinates.y\n                    },\n                    this._immediateUserSelection,\n                    ( offsetX:number, offsetY:number ) => {\n\n                        // preventing translation of drag image when there was a drag operation cleanup meanwhile\n                        if( !this._dragImage ) {\n                            return;\n                        }\n\n                        handledDragImageTranslate = true;\n\n                        this._currentHotspotCoordinates.x += offsetX;\n                        this._currentHotspotCoordinates.y += offsetY;\n                        this._dragImagePageCoordinates.x += offsetX;\n                        this._dragImagePageCoordinates.y += offsetY;\n\n                        translateDragImage(\n                            this._dragImage,\n                            this._dragImagePageCoordinates,\n                            this._dragImageTransforms,\n                            this._dragImageOffset,\n                            this._config.dragImageCenterOnTouch\n                        );\n                    }\n                );\n\n                if( handledDragImageTranslate ) {\n                    return;\n                }\n            }\n            catch( e ) {\n                console.log( \"dnd-poly: error in dragImageTranslateOverride hook: \" + e );\n            }\n        }\n\n        translateDragImage( this._dragImage, this._dragImagePageCoordinates, this._dragImageTransforms, this._dragImageOffset, this._config.dragImageCenterOnTouch );\n    }\n\n    private _onTouchEndOrCancel( event:TouchEvent ) {\n\n        // filter unrelated touches\n        if( isTouchIdentifierContainedInTouchEvent( event, this._initialTouch.identifier ) === false ) {\n            return;\n        }\n\n        // let the dragImageTranslateOverride know that its over\n        if( this._config.dragImageTranslateOverride ) {\n            try {\n                /* tslint:disable */\n                this._config.dragImageTranslateOverride( undefined, undefined, undefined, function() {\n                } );\n            }\n            catch( e ) {\n                console.log( \"dnd-poly: error in dragImageTranslateOverride hook: \" + e );\n            }\n        }\n\n        // drag operation did not even start\n        if( this._dragOperationState === DragOperationState.POTENTIAL ) {\n            this._cleanup();\n            return;\n        }\n\n        // we emulate d'n'd so we dont want any defaults to apply\n        event.preventDefault();\n\n        this._dragOperationState = (event.type === \"touchcancel\") ? DragOperationState.CANCELLED : DragOperationState.ENDED;\n    }\n\n    //</editor-fold>\n\n    //<editor-fold desc=\"dnd spec logic\">\n\n    /**\n     * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n     */\n    private _dragAndDropProcessModelIteration():void {\n\n        if( DEBUG ) {\n            var debug_class                = CLASS_PREFIX + \"debug\",\n                debug_class_user_selection = CLASS_PREFIX + \"immediate-user-selection\",\n                debug_class_drop_target    = CLASS_PREFIX + \"current-drop-target\";\n        }\n\n        const previousDragOperation = this._currentDragOperation;\n\n        // Fire a DND event named drag event at the source node.\n        this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n        this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n        const dragCancelled = dispatchDragEvent( \"drag\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer );\n        if( dragCancelled ) {\n            console.log( \"dnd-poly: drag event cancelled.\" );\n            // If this event is canceled, the user agent must set the current drag operation to \"none\" (no drag operation).\n            this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n        }\n\n        // Otherwise, if the user ended the drag-and-drop operation (e.g. by releasing the mouse button in a mouse-driven drag-and-drop interface),\n        // or if the drag event was canceled, then this will be the last iteration.\n        if( dragCancelled || this._dragOperationState === DragOperationState.ENDED || this._dragOperationState === DragOperationState.CANCELLED ) {\n\n            const dragFailed = this._dragOperationEnded( this._dragOperationState );\n\n            // if drag failed transition snap back\n            if( dragFailed ) {\n\n                applyDragImageSnapback( this._sourceNode, this._dragImage, this._dragImageTransforms, () => {\n                    this._finishDragOperation();\n                } );\n                return;\n            }\n\n            // Otherwise immediately\n            // Fire a DND event named dragend at the source node.\n            this._finishDragOperation();\n            return;\n        }\n\n        // If the drag event was not canceled and the user has not ended the drag-and-drop operation,\n        // check the state of the drag-and-drop operation, as follows:\n        const newUserSelection:HTMLElement = <HTMLElement>document.elementFromPoint( this._currentHotspotCoordinates.x, this._currentHotspotCoordinates.y );\n\n        console.log( \"dnd-poly: new immediate user selection is: \" + newUserSelection );\n\n        const previousTargetElement = this._currentDropTarget;\n\n        // If the user is indicating a different immediate user selection than during the last iteration (or if this is the first iteration),\n        // and if this immediate user selection is not the same as the current target element,\n        // then fire a DND event named dragexit at the current target element,\n        // and then update the current target element as follows:\n        if( newUserSelection !== this._immediateUserSelection && newUserSelection !== this._currentDropTarget ) {\n\n            if( DEBUG ) {\n\n                if( this._immediateUserSelection ) {\n                    this._immediateUserSelection.classList.remove( debug_class_user_selection );\n                }\n\n                if( newUserSelection ) {\n                    newUserSelection.classList.add( debug_class );\n                    newUserSelection.classList.add( debug_class_user_selection );\n                }\n            }\n\n            this._immediateUserSelection = newUserSelection;\n\n            if( this._currentDropTarget !== null ) {\n                this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n                dispatchDragEvent( \"dragexit\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false );\n            }\n\n            // If the new immediate user selection is null\n            if( this._immediateUserSelection === null ) {\n                //Set the current target element to null also.\n                this._currentDropTarget = this._immediateUserSelection;\n\n                console.log( \"dnd-poly: current drop target changed to null\" );\n            }\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // If the new immediate user selection is in a non-DOM document or application\n            // else if() {\n            //      Set the current target element to the immediate user selection.\n            //      this.currentDropTarget = this.immediateUserSelection;\n            //      return;\n            // }\n            // Otherwise\n            else {\n                // Fire a DND event named dragenter at the immediate user selection.\n                //the polyfill cannot determine if a handler even exists as browsers do to silently\n                // allow drop when no listener existed, so this event MUST be handled by the client\n                this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = determineDropEffect( this._dragDataStore._effectAllowed, this._sourceNode );\n                if( dispatchDragEvent( \"dragenter\", this._immediateUserSelection, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) ) {\n                    console.log( \"dnd-poly: dragenter default prevented\" );\n                    // If the event is canceled, then set the current target element to the immediate user selection.\n                    this._currentDropTarget = this._immediateUserSelection;\n                    this._currentDragOperation = determineDragOperation( this._dataTransfer.effectAllowed, this._dataTransfer.dropEffect );\n                }\n                // Otherwise, run the appropriate step from the following list:\n                else {\n\n                    // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n                    //console.log( \"dnd-poly: dragenter not prevented, searching for dropzone..\" );\n                    //var newTarget = DragOperationController.FindDropzoneElement( this.immediateUserSelection );\n\n                    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                    // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state) or an\n                    // editable element, and the drag data store item list has an item with the drag data item type string \"text/plain\" and the drag data\n                    // item kind Plain Unicode string\n                    //if( ElementIsTextDropzone( this.immediateUserSelection, this.dragDataStore ) ) {\n                    //Set the current target element to the immediate user selection anyway.\n                    //this.currentDropTarget = this.immediateUserSelection;\n                    //}\n                    //else\n                    // If the current target element is an element with a dropzone attribute that matches the drag data store\n                    //if( newTarget === this.immediateUserSelection &&\n                    //    DragOperationController.GetOperationForMatchingDropzone( this.immediateUserSelection, this.dragDataStore ) !== \"none\" ) {\n                    // Set the current target element to the immediate user selection anyway.\n                    //    this.currentDropTarget = this.immediateUserSelection;\n                    //}\n                    // If the immediate user selection is an element that itself has an ancestor element\n                    // with a dropzone attribute that matches the drag data store\n                    // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n                    //else if( newTarget !== null && DragOperationController.GetOperationForMatchingDropzone( newTarget, this.dragDataStore ) ) {\n\n                    // If the immediate user selection is new target, then leave the current target element unchanged.\n\n                    // Otherwise, fire a DND event named dragenter at new target, with the current target element\n                    // as the specific related target. Then, set the current target element to new target,\n                    // regardless of whether that event was canceled or not.\n                    //this.dragenter( newTarget, this.currentDropTarget );\n                    //this.currentDropTarget = newTarget;\n                    //}\n                    // If the current target element is not the body element\n                    //else\n                    if( this._immediateUserSelection !== document.body ) {\n                        // Fire a DND event named dragenter at the body element, and set the current target element to the body element, regardless of\n                        // whether that event was canceled or not.\n                        // Note: If the body element is null, then the event will be fired at the Document object (as\n                        // required by the definition of the body element), but the current target element would be set to null, not the Document object.\n\n                        // We do not listen to what the spec says here because this results in doubled events on the body/document because if the first one\n                        // was not cancelled it will have bubbled up to the body already ;)\n                        //  this.dragenter( window.document.body );\n                        this._currentDropTarget = document.body;\n                    }\n                    // Otherwise\n                    //else {\n                    // leave the current drop target unchanged\n                    //}\n                }\n            }\n        }\n\n        // If the previous step caused the current target element to change,\n        // and if the previous target element was not null or a part of a non-DOM document,\n        // then fire a DND event named dragleave at the previous target element.\n        if( previousTargetElement !== this._currentDropTarget && (isDOMElement( previousTargetElement ) ) ) {\n\n            if( DEBUG ) {\n                previousTargetElement.classList.remove( debug_class_drop_target );\n            }\n\n            console.log( \"dnd-poly: current drop target changed.\" );\n\n            this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n            this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n            dispatchDragEvent( \"dragleave\", previousTargetElement, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false, this._currentDropTarget );\n        }\n\n        // If the current target element is a DOM element, then fire a DND event named dragover at this current target element.\n        if( isDOMElement( this._currentDropTarget ) ) {\n\n            if( DEBUG ) {\n                this._currentDropTarget.classList.add( debug_class );\n                this._currentDropTarget.classList.add( debug_class_drop_target );\n            }\n\n            // If the dragover event is not canceled, run the appropriate step from the following list:\n            this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n            this._dataTransfer.dropEffect = determineDropEffect( this._dragDataStore._effectAllowed, this._sourceNode );\n            if( dispatchDragEvent( \"dragover\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) === false ) {\n\n                console.log( \"dnd-poly: dragover not prevented on possible drop-target.\" );\n                // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n\n                // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state) or\n                // an editable element, and the drag data store item list has an item with the drag data item type string \"text/plain\" and the drag\n                // data item kind Plain Unicode string\n                //if( ElementIsTextDropzone( this.currentDropTarget, this.dragDataStore ) ) {\n                // Set the current drag operation to either \"copy\" or \"move\", as appropriate given the platform conventions.\n                //this.currentDragOperation = \"copy\"; //or move. spec says its platform specific behaviour.\n                //}\n                //else {\n                // If the current target element is an element with a dropzone attribute that matches the drag data store\n                //this.currentDragOperation = DragOperationController.GetOperationForMatchingDropzone( this.currentDropTarget, this.dragDataStore );\n                //}\n                // when dragover is not prevented and no dropzones are there, no drag operation\n                this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n            }\n            // Otherwise (if the dragover event is canceled), set the current drag operation based on the values of the effectAllowed and\n            // dropEffect attributes of the DragEvent object's dataTransfer object as they stood after the event dispatch finished\n            else {\n\n                console.log( \"dnd-poly: dragover prevented.\" );\n\n                this._currentDragOperation = determineDragOperation( this._dataTransfer.effectAllowed, this._dataTransfer.dropEffect );\n            }\n        }\n\n        console.log( \"dnd-poly: d'n'd iteration ended. current drag operation: \" + this._currentDragOperation );\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // Otherwise, if the current target element is not a DOM element, use platform-specific mechanisms to determine what drag operation is\n        // being performed (none, copy, link, or move), and set the current drag operation accordingly.\n\n        //Update the drag feedback (e.g. the mouse cursor) to match the current drag operation, as follows:\n        // ---------------------------------------------------------------------------------------------------------\n        // Drag operation   |\tFeedback\n        // \"copy\"\t        |  Data will be copied if dropped here.\n        // \"link\"\t        |  Data will be linked if dropped here.\n        // \"move\"\t        |  Data will be moved if dropped here.\n        // \"none\"\t        |  No operation allowed, dropping here will cancel the drag-and-drop operation.\n        // ---------------------------------------------------------------------------------------------------------\n\n        if( previousDragOperation !== this._currentDragOperation ) {\n            this._dragImage.classList.remove( CLASS_PREFIX + previousDragOperation );\n        }\n\n        const currentDragOperationClass = CLASS_PREFIX + this._currentDragOperation;\n\n        if( this._dragImage.classList.contains( currentDragOperationClass ) === false ) {\n            this._dragImage.classList.add( currentDragOperationClass );\n        }\n    }\n\n    /**\n     * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n     */\n    private _dragOperationEnded( state:DragOperationState ):boolean {\n\n        console.log( \"dnd-poly: drag operation end detected with \" + this._currentDragOperation );\n\n        if( DEBUG ) {\n\n            var debug_class_user_selection = CLASS_PREFIX + \"immediate-user-selection\",\n                debug_class_drop_target    = CLASS_PREFIX + \"current-drop-target\";\n\n            if( this._currentDropTarget ) {\n                this._currentDropTarget.classList.remove( debug_class_drop_target );\n\n            }\n            if( this._immediateUserSelection ) {\n                this._immediateUserSelection.classList.remove( debug_class_user_selection );\n            }\n        }\n\n        //var dropped:boolean = undefined;\n\n        // Run the following steps, then stop the drag-and-drop operation:\n\n        // If the current drag operation is \"none\" (no drag operation), or,\n        // if the user ended the drag-and-drop operation by canceling it (e.g. by hitting the Escape key), or\n        // if the current target element is null, then the drag operation failed.\n        const dragFailed = (this._currentDragOperation === DROP_EFFECTS[ DROP_EFFECT.NONE ]\n                            || this._currentDropTarget === null\n                            || state === DragOperationState.CANCELLED);\n        if( dragFailed ) {\n\n            // Run these substeps:\n\n            // Let dropped be false.\n            //dropped = false;\n\n            // If the current target element is a DOM element, fire a DND event named dragleave at it;\n            if( isDOMElement( this._currentDropTarget ) ) {\n                this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n                dispatchDragEvent( \"dragleave\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false );\n            }\n\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // otherwise, if it is not null, use platform-specific conventions for drag cancellation.\n            //else if( this.currentDropTarget !== null ) {\n            //}\n        }\n        // Otherwise, the drag operation was as success; run these substeps:\n        else {\n\n            // Let dropped be true.\n            //dropped = true;\n\n            // If the current target element is a DOM element, fire a DND event named drop at it;\n            if( isDOMElement( this._currentDropTarget ) ) {\n\n                // If the event is canceled, set the current drag operation to the value of the dropEffect attribute of the\n                // DragEvent object's dataTransfer object as it stood after the event dispatch finished.\n\n                this._dragDataStore._mode = DragDataStoreMode.READONLY;\n                this._dataTransfer.dropEffect = this._currentDragOperation;\n                if( dispatchDragEvent( \"drop\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) ===\n                    true ) {\n\n                    this._currentDragOperation = this._dataTransfer.dropEffect;\n                }\n                // Otherwise, the event is not canceled; perform the event's default action, which depends on the exact target as follows:\n                else {\n\n                    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                    // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state)\n                    // or an editable element,\n                    // and the drag data store item list has an item with the drag data item type string \"text/plain\"\n                    // and the drag data item kind Plain Unicode string\n                    //if( ElementIsTextDropzone( this.currentDropTarget, this.dragDataStore ) ) {\n                    // Insert the actual data of the first item in the drag data store item list to have a drag data item type string of\n                    // \"text/plain\" and a drag data item kind that is Plain Unicode string into the text field or editable element in a manner\n                    // consistent with platform-specific conventions (e.g. inserting it at the current mouse cursor position, or inserting it at\n                    // the end of the field).\n                    //}\n                    // Otherwise\n                    //else {\n                    // Reset the current drag operation to \"none\".\n                    this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n                    //}\n                }\n            }\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // otherwise, use platform-specific conventions for indicating a drop.\n            //else {\n            //}\n        }\n\n        return dragFailed;\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        //if( this.dragend( this.sourceNode ) ) {\n        //    return;\n        //}\n\n        // Run the appropriate steps from the following list as the default action of the dragend event:\n\n        //if( !dropped ) {\n        //    return;\n        //}\n        // dropped is true\n\n        //if( this.currentDragOperation !== \"move\" ) {\n        //    return;\n        //}\n        //// drag operation is move\n        //\n        //if( ElementIsTextDropzone( this.currentDropTarget ) === false ) {\n        //    return;\n        //}\n        //// element is textfield\n        //\n        //// and the source of the drag-and-drop operation is a selection in the DOM\n        //if( this.sourceNode.nodeType === 1 ) {\n        //    // The user agent should delete the range representing the dragged selection from the DOM.\n        //}\n        //// and the source of the drag-and-drop operation is a selection in a text field\n        //else if( this.sourceNode.nodeType === 3 ) {\n        //    // The user agent should delete the dragged selection from the relevant text field.\n        //}\n        //// Otherwise, The event has no default action.\n    }\n\n    // dispatch dragend event and cleanup drag operation\n    private _finishDragOperation():void {\n        console.log( \"dnd-poly: dragimage snap back transition ended\" );\n\n        // Fire a DND event named dragend at the source node.\n        this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n        this._dataTransfer.dropEffect = this._currentDragOperation;\n        dispatchDragEvent( \"dragend\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false );\n\n        // drag operation over and out\n        this._dragOperationState = DragOperationState.ENDED;\n        this._cleanup();\n    }\n\n    //</editor-fold>\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"DataTransfer/DragDataStore\">\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#drag-data-store-mode\n */\nconst enum DragDataStoreMode {\n    _DISCONNECTED, // adding an extra mode here because we need a special state to disconnect the data store from dataTransfer instance\n    READONLY,\n    READWRITE,\n    PROTECTED\n}\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#the-drag-data-store\n */\ninterface DragDataStore {\n    _mode:DragDataStoreMode;\n    _data:{[type:string]:any};\n    _types:Array<string>;\n    _effectAllowed:string;\n}\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#datatransfer\n * TODO fail with errors when somebody uses it wrong so they know they are doing it wrong?\n */\nclass DataTransfer {\n\n    private _dropEffect:string = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n\n    constructor( private _dataStore:DragDataStore,\n                 private _setDragImageHandler:( image:Element, x:number, y:number ) => void ) {\n    }\n\n    //public get files():FileList {\n    //    return undefined;\n    //}\n    //\n    //public get items():DataTransferItemList {\n    //    return undefined;\n    //}\n\n    public get types():ReadonlyArray<string> {\n        if( this._dataStore._mode !== DragDataStoreMode._DISCONNECTED ) {\n            return Object.freeze( this._dataStore._types );\n        }\n    }\n\n    public setData( type:string, data:string ):void {\n        if( this._dataStore._mode === DragDataStoreMode.READWRITE ) {\n\n            if( type.indexOf( \" \" ) > -1 ) {\n                throw new Error( \"illegal arg: type contains space\" );\n            }\n\n            this._dataStore._data[ type ] = data;\n\n            if( this._dataStore._types.indexOf( type ) === -1 ) {\n                this._dataStore._types.push( type );\n            }\n        }\n    }\n\n    public getData( type:string ):string {\n        if( this._dataStore._mode === DragDataStoreMode.READONLY\n            || this._dataStore._mode === DragDataStoreMode.READWRITE ) {\n            return this._dataStore._data[ type ] || \"\";\n        }\n    }\n\n    public clearData( format?:string ):void {\n        if( this._dataStore._mode === DragDataStoreMode.READWRITE ) {\n            // delete data for format\n            if( format && this._dataStore._data[ format ] ) {\n                delete this._dataStore._data[ format ];\n                var index = this._dataStore._types.indexOf( format );\n                if( index > -1 ) {\n                    this._dataStore._types.splice( index, 1 );\n                }\n                return;\n            }\n            // delete all data\n            this._dataStore._data = {};\n            this._dataStore._types = [];\n        }\n    }\n\n    public setDragImage( image:Element, x:number, y:number ):void {\n        if( this._dataStore._mode === DragDataStoreMode.READWRITE ) {\n            this._setDragImageHandler( image, x, y );\n        }\n    }\n\n    public get effectAllowed() {\n        return this._dataStore._effectAllowed;\n    }\n\n    public set effectAllowed( value ) {\n        if( this._dataStore._mode === DragDataStoreMode.READWRITE\n            && ALLOWED_EFFECTS.indexOf( value ) > -1 ) {\n            this._dataStore._effectAllowed = value;\n        }\n    }\n\n    public get dropEffect() {\n        return this._dropEffect;\n    }\n\n    public set dropEffect( value ) {\n        if( this._dataStore._mode !== DragDataStoreMode._DISCONNECTED\n            && ALLOWED_EFFECTS.indexOf( value ) > -1 ) {\n            this._dropEffect = value;\n        }\n    }\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"util\">\n\nexport interface Point {\n    x:number;\n    y:number;\n}\n\nfunction addDocumentListener( ev:string, handler:EventListener, passive:boolean = true ) {\n    (document.addEventListener as WhatWGAddEventListener)( ev, handler, supportsPassive ? { passive:passive } : false );\n}\n\nfunction removeDocumentListener( ev:string, handler:EventListener ) {\n    document.removeEventListener( ev, handler );\n}\n\nfunction average( array:Array<number> ) {\n    if( array.length === 0 ) {\n        return 0;\n    }\n    return array.reduce( (function( s, v ) {\n            return v + s;\n        }), 0 ) / array.length;\n}\n\nfunction isDOMElement( object:any ) {\n    return object && object.tagName;\n}\n\nfunction isTouchIdentifierContainedInTouchEvent( newTouch:TouchEvent, touchIdentifier:number ) {\n    for( let i = 0; i < newTouch.changedTouches.length; i++ ) {\n        const touch = newTouch.changedTouches[ i ];\n        if( touch.identifier === touchIdentifier ) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction createDragEventFromTouch( targetElement:Element,\n                                   e:TouchEvent,\n                                   type:string,\n                                   cancelable:boolean,\n                                   window:Window,\n                                   dataTransfer:DataTransfer,\n                                   relatedTarget:Element = null ) {\n\n    const touch:Touch = e.changedTouches[ 0 ];\n\n    const dndEvent:DragEvent = <DragEvent>new Event( type, {\n        bubbles: true,\n        cancelable: cancelable\n    } );\n\n    // cast our polyfill\n    (dndEvent as any).dataTransfer = <any>dataTransfer;\n    (dndEvent as any).relatedTarget = relatedTarget;\n\n    // set the coordinates\n    (dndEvent as any).screenX = touch.screenX;\n    (dndEvent as any).screenY = touch.screenY;\n    (dndEvent as any).clientX = touch.clientX;\n    (dndEvent as any).clientY = touch.clientY;\n    (dndEvent as any).pageX = touch.pageX;\n    (dndEvent as any).pageY = touch.pageY;\n\n    const targetRect = targetElement.getBoundingClientRect();\n    (dndEvent as any).offsetX = dndEvent.clientX - targetRect.left;\n    (dndEvent as any).offsetY = dndEvent.clientY - targetRect.top;\n\n    return dndEvent;\n}\n\n/**\n * Calc center of polygon spanned by multiple touches in page (full page size, with hidden scrollable area) coordinates\n * or in viewport (screen coordinates) coordinates.\n */\nfunction updateCentroidCoordinatesOfTouchesIn( coordinateProp:string, event:TouchEvent, outPoint:Point ):void {\n    const pageXs:Array<number> = [], pageYs:Array<number> = [];\n    for( let i = 0; i < event.touches.length; i++ ) {\n        const touch = event.touches[ i ];\n        pageXs.push( touch[ coordinateProp + \"X\" ] );\n        pageYs.push( touch[ coordinateProp + \"Y\" ] );\n    }\n    outPoint.x = average( pageXs );\n    outPoint.y = average( pageYs );\n}\n\nfunction prepareNodeCopyAsDragImage( srcNode:HTMLElement, dstNode:HTMLElement ) {\n    // Is this node an element?\n    if( srcNode.nodeType === 1 ) {\n\n        // Clone the style\n        const cs = getComputedStyle( srcNode );\n        for( let i = 0; i < cs.length; i++ ) {\n            const csName = cs[ i ];\n            dstNode.style.setProperty( csName, cs.getPropertyValue( csName ), cs.getPropertyPriority( csName ) );\n        }\n\n        // no interaction with the drag image, pls! this is also important to make the drag image transparent for hit-testing\n        // hit testing is done in the drag and drop iteration to find the element the user currently is hovering over while dragging.\n        // if pointer-events is not none or a browser does behave in an unexpected way than the hit test transparency on the drag image\n        // will break\n        dstNode.style.pointerEvents = \"none\";\n\n        // Remove any potential conflict attributes\n        dstNode.removeAttribute( \"id\" );\n        dstNode.removeAttribute( \"class\" );\n        dstNode.removeAttribute( \"draggable\" );\n    }\n\n    // Do the same for the children\n    if( srcNode.hasChildNodes() ) {\n        for( let i = 0; i < srcNode.childNodes.length; i++ ) {\n            prepareNodeCopyAsDragImage( <HTMLElement>srcNode.childNodes[ i ], <HTMLElement>dstNode.childNodes[ i ] );\n        }\n    }\n}\n\nfunction createDragImage( sourceNode:HTMLElement ):HTMLElement {\n\n    const dragImage = <HTMLElement>sourceNode.cloneNode( true );\n\n    // this removes any id's and stuff that could interfere with drag and drop\n    prepareNodeCopyAsDragImage( sourceNode, dragImage );\n\n    // set layout styles for freely moving it around\n    dragImage.style.position = \"absolute\";\n    dragImage.style.left = \"0px\";\n    dragImage.style.top = \"0px\";\n    // on top of all\n    dragImage.style.zIndex = \"999999\";\n\n    // add polyfill class for default styling\n    dragImage.classList.add( CLASS_DRAG_IMAGE );\n    dragImage.classList.add( CLASS_DRAG_OPERATION_ICON );\n\n    return dragImage;\n}\n\nfunction extractTransformStyles( sourceNode:HTMLElement ):string[] {\n\n    return TRANSFORM_CSS_VENDOR_PREFIXES.map( function( prefix ) {\n\n        let transform = sourceNode.style[ prefix + \"transform\" ];\n\n        if( !transform || transform === \"none\" ) {\n            return \"\";\n        }\n\n        // TODO what about translateX(x), translateY(x), translateZ(z), translate3d(x,y,z), matrix(*,*,*,*,x,y) ?\n\n        // removes translate(x,y)\n        return transform.replace( /translate\\(\\D*\\d+[^,]*,\\D*\\d+[^,]*\\)\\s*/g, \"\" );\n    } );\n}\n\nfunction translateDragImage( dragImage:HTMLElement, pnt:Point, originalTransforms:string[], offset?:Point, centerOnCoordinates = true ):void {\n\n    let x = pnt.x, y = pnt.y;\n\n    if( offset ) {\n        x += offset.x;\n        y += offset.y;\n    }\n\n    if( centerOnCoordinates ) {\n        x -= (parseInt( <any>dragImage.offsetWidth, 10 ) / 2);\n        y -= (parseInt( <any>dragImage.offsetHeight, 10 ) / 2);\n    }\n\n    // using translate3d for best performance\n    const translate = \"translate3d(\" + x + \"px,\" + y + \"px, 0)\";\n\n    for( let i = 0; i < TRANSFORM_CSS_VENDOR_PREFIXES.length; i++ ) {\n        const transformProp = TRANSFORM_CSS_VENDOR_PREFIXES[ i ] + \"transform\";\n        dragImage.style[ transformProp ] = translate + \" \" + originalTransforms[ i ];\n    }\n}\n\n/**\n * calculates the coordinates of the drag source and transitions the drag image to those coordinates.\n * the drag operation is finished after the transition has ended.\n */\nfunction applyDragImageSnapback( sourceEl:HTMLElement, dragImage:HTMLElement, dragImageTransforms:string[], transitionEndCb:Function ):void {\n\n    const cs = getComputedStyle( sourceEl );\n\n    if( cs.visibility === \"hidden\" || cs.display === \"none\" ) {\n        console.log( \"dnd-poly: source node is not visible. skipping snapback transition.\" );\n        // shortcut to end the drag operation\n        transitionEndCb();\n        return;\n    }\n\n    console.log( \"dnd-poly: starting dragimage snap back\" );\n\n    // calc source node position\n    const rect = sourceEl.getBoundingClientRect();\n\n    const pnt:Point = {\n        x: rect.left,\n        y: rect.top\n    };\n\n    // add scroll offset of document\n    pnt.x += (document.body.scrollLeft || document.documentElement.scrollLeft);\n    pnt.y += (document.body.scrollTop || document.documentElement.scrollTop);\n\n    //TODO this sometimes fails.. find out when exactly and how to detect\n    pnt.x -= parseInt( cs.marginLeft, 10 );\n    pnt.y -= parseInt( cs.marginTop, 10 );\n\n    // add class containing transition rules\n    dragImage.classList.add( CLASS_DRAG_IMAGE_SNAPBACK );\n\n    const csDragImage = getComputedStyle( dragImage );\n    const durationInS = parseFloat( csDragImage.transitionDuration );\n    const delayInS = parseFloat( csDragImage.transitionDelay );\n    const durationInMs = Math.round( (durationInS + delayInS) * 1000 );\n\n    // apply the translate\n    translateDragImage( dragImage, pnt, dragImageTransforms, undefined, false );\n\n    setTimeout( transitionEndCb, durationInMs );\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"dnd spec util\">\n\n/**\n * Implements \"6.\" in the processing steps defined for a dnd event\n * https://html.spec.whatwg.org/multipage/interaction.html#dragevent\n */\nfunction determineDropEffect( effectAllowed:string, sourceNode:Element ) {\n\n    // uninitialized\n    if( !effectAllowed ) {\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        //if( sourceNode.nodeType === 1 ) {\n        //\n        //return \"move\";\n        //}\n\n        // link\n        if( sourceNode.nodeType === 3 && (<HTMLElement>sourceNode).tagName === \"A\" ) {\n            return DROP_EFFECTS[ DROP_EFFECT.LINK ];\n        }\n\n        // copy\n        return DROP_EFFECTS[ DROP_EFFECT.COPY ];\n    }\n\n    // none\n    if( effectAllowed === ALLOWED_EFFECTS[ EFFECT_ALLOWED.NONE ] ) {\n        return DROP_EFFECTS[ DROP_EFFECT.NONE ];\n    }\n    // copy or all\n    if( effectAllowed.indexOf( ALLOWED_EFFECTS[ EFFECT_ALLOWED.COPY ] ) === 0 || effectAllowed === ALLOWED_EFFECTS[ EFFECT_ALLOWED.ALL ] ) {\n        return DROP_EFFECTS[ DROP_EFFECT.COPY ];\n    }\n    // link\n    if( effectAllowed.indexOf( ALLOWED_EFFECTS[ EFFECT_ALLOWED.LINK ] ) === 0 ) {\n        return DROP_EFFECTS[ DROP_EFFECT.LINK ];\n    }\n    // move\n    if( effectAllowed === ALLOWED_EFFECTS[ EFFECT_ALLOWED.MOVE ] ) {\n        return DROP_EFFECTS[ DROP_EFFECT.MOVE ];\n    }\n\n    // copy\n    return DROP_EFFECTS[ DROP_EFFECT.COPY ];\n}\n\n/**\n * Reference https://html.spec.whatwg.org/multipage/interaction.html#dndevents\n */\nfunction dispatchDragEvent( dragEvent:string,\n                            targetElement:Element,\n                            touchEvent:TouchEvent,\n                            dataStore:DragDataStore,\n                            dataTransfer:DataTransfer,\n                            cancelable = true,\n                            relatedTarget:Element = null ):boolean {\n\n    console.log( \"dnd-poly: dispatching \" + dragEvent );\n\n    if( DEBUG ) {\n        var debug_class                      = CLASS_PREFIX + \"debug\",\n            debug_class_event_target         = CLASS_PREFIX + \"event-target\",\n            debug_class_event_related_target = CLASS_PREFIX + \"event-related-target\";\n        targetElement.classList.add( debug_class );\n        targetElement.classList.add( debug_class_event_target );\n        if( relatedTarget ) {\n            relatedTarget.classList.add( debug_class );\n            relatedTarget.classList.add( debug_class_event_related_target );\n        }\n    }\n\n    const leaveEvt = createDragEventFromTouch( targetElement, touchEvent, dragEvent, cancelable, document.defaultView, dataTransfer, relatedTarget );\n    const cancelled = !targetElement.dispatchEvent( leaveEvt );\n\n    dataStore._mode = DragDataStoreMode._DISCONNECTED;\n\n    if( DEBUG ) {\n        targetElement.classList.remove( debug_class_event_target );\n        if( relatedTarget ) {\n            relatedTarget.classList.remove( debug_class_event_related_target );\n        }\n    }\n\n    return cancelled;\n}\n\n/**\n * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n */\nfunction determineDragOperation( effectAllowed:string, dropEffect:string ):string {\n\n    // unitialized or all\n    if( !effectAllowed || effectAllowed === ALLOWED_EFFECTS[ 7 ] ) {\n        return dropEffect;\n    }\n\n    if( dropEffect === DROP_EFFECTS[ DROP_EFFECT.COPY ] ) {\n        if( effectAllowed.indexOf( DROP_EFFECTS[ DROP_EFFECT.COPY ] ) === 0 ) {\n            return DROP_EFFECTS[ DROP_EFFECT.COPY ];\n        }\n    }\n    else if( dropEffect === DROP_EFFECTS[ DROP_EFFECT.LINK ] ) {\n        if( effectAllowed.indexOf( DROP_EFFECTS[ DROP_EFFECT.LINK ] ) === 0 || effectAllowed.indexOf( \"Link\" ) > -1 ) {\n            return DROP_EFFECTS[ DROP_EFFECT.LINK ];\n        }\n    }\n    else if( dropEffect === DROP_EFFECTS[ DROP_EFFECT.MOVE ] ) {\n        if( effectAllowed.indexOf( DROP_EFFECTS[ DROP_EFFECT.MOVE ] ) === 0 || effectAllowed.indexOf( \"Move\" ) > -1 ) {\n            return DROP_EFFECTS[ DROP_EFFECT.MOVE ];\n        }\n    }\n\n    return DROP_EFFECTS[ DROP_EFFECT.NONE ];\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"dead dnd spec code\">\n\n/**\n * // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n */\n//public static ElementIsTextDropzone( element:HTMLElement, dragDataStore?:DragDataStore ) {\n//\n//    if( dragDataStore && !dragDataStore.data[ \"text/plain\" ] ) {\n//        return false;\n//    }\n//\n//    if( element.isContentEditable ) {\n//        return true;\n//    }\n//\n//    if( element.tagName === \"TEXTAREA\" ) {\n//        return true;\n//    }\n//\n//    if( element.tagName === \"INPUT\" ) {\n//        if( element.getAttribute( \"type\" ) === \"text\" ) {\n//            return true;\n//        }\n//    }\n//\n//    return false;\n//}\n\n/**\n * NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n *\n * Helper method for recursively go from a nested element up the ancestor chain\n * to see if any element has a dropzone.\n */\n//private static FindDropzoneElement( element:HTMLElement ):HTMLElement {\n//\n//    if( !element || !element.hasAttribute || typeof element.hasAttribute !== \"function\" ) {\n//        return null;\n//    }\n//\n//    if( element.hasAttribute( \"dropzone\" ) ) {\n//        return element;\n//    }\n//\n//    if( element === window.document.body ) {\n//        return null;\n//    }\n//\n//    return DragOperationController.FindDropzoneElement( element.parentElement );\n//}\n\n/**\n * NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n *\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#the-dropzone-attribute\n * by implementing the dropzone processing steps.\n */\n//private static GetOperationForMatchingDropzone( element:HTMLElement, dragDataStore:DragDataStore ):string {\n\n// If the current target element is an element with a dropzone attribute that matches the drag data store and specifies an operation\n//      Set the current drag operation to the operation specified by the dropzone attribute of the current target element.\n// If the current target element is an element with a dropzone attribute that matches the drag data store and does not specify an operation\n//      Set the current drag operation to \"copy\".\n// Otherwise\n//      Reset the current drag operation to \"none\".\n//var value = element.getAttribute( \"dropzone\" );\n//if( !value ) {\n//\n//    return \"none\";\n//}\n//\n//var matched = false;\n//var operation;\n//var keywords = value.split( \" \" );\n//\n//for( var i:number = 0; i < keywords.length; i++ ) {\n//    var keyword = keywords[ i ];\n//\n//    if( keyword === \"copy\" || keyword === \"move\" || keyword === \"link\" ) {\n//        if( !operation ) {\n//            operation = keyword;\n//        }\n//        continue;\n//    }\n//\n//    if( keyword.length < 3 || keyword[ 1 ] !== \":\" ) {\n//        continue;\n//    }\n//\n//    var splitKeyword = keyword.split( \":\" );\n//    var kind = splitKeyword[ 0 ].toLowerCase();\n//    var type = splitKeyword[ 1 ].toLowerCase();\n//\n//    if( dragDataStore.types.indexOf( type ) > -1 ) {\n//        matched = true;\n//    }\n//}\n//\n//if( !matched ) {\n//    return \"none\";\n//}\n//\n//if( !operation ) {\n//    return \"copy\";\n//}\n//\n//return operation;\n//}\n\n//</editor-fold>\n\nexport const DragDropPolyfill = {\n    DEBUG: DEBUG,\n    Initialize: Initialize\n};\n\n"]}