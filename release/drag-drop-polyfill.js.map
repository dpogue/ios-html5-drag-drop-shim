{"version":3,"file":"drag-drop-polyfill.js","sourceRoot":"","sources":["drag-drop-polyfill.ts"],"names":[],"mappings":"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","sourcesContent":["// debug mode, which will highlight drop target, immediate user selection and events fired as you interact.\nlet DEBUG:boolean;\n\n\n//TODO temporary definition of new event listener signature, should be in lib.d.ts\n// See https://github.com/Microsoft/TypeScript/issues/9548\n\ninterface WhatWGEventListenerArgs {\n    capture?: boolean;\n}\n\ninterface WhatWGAddEventListenerArgs extends WhatWGEventListenerArgs {\n    passive?: boolean;\n    once?: boolean;\n}\n\ntype WhatWGAddEventListener = (\n    type: string,\n    listener: (event:Event) => void,\n    options?: WhatWGAddEventListenerArgs\n) => void;\n\n\n//<editor-fold desc=\"feature detection\">\n\ninterface DetectedFeatures {\n    draggable:boolean;\n    dragEvents:boolean;\n    touchEvents:boolean;\n    userAgentSupportingNativeDnD:boolean;\n}\n\nfunction detectFeatures():DetectedFeatures {\n\n    let features:DetectedFeatures = {\n        dragEvents: (\"ondragstart\" in document.documentElement),\n        draggable: (\"draggable\" in document.documentElement),\n        touchEvents: (\"ontouchstart\" in document.documentElement),\n        userAgentSupportingNativeDnD: undefined\n    };\n\n    const isBlinkEngine = !!((<any>window).chrome) || /chrome/i.test( navigator.userAgent );\n\n    features.userAgentSupportingNativeDnD = !(\n        // if is mobile safari or android browser -> no native dnd\n        (/iPad|iPhone|iPod|Android/.test( navigator.userAgent ))\n        || // OR\n        //if is blink(chrome/opera) with touch events enabled -> no native dnd\n        (isBlinkEngine && features.touchEvents)\n    );\n\n    if( DEBUG ) {\n        Object.keys( features ).forEach( function( key ) {\n            console.log( \"dnd-poly: detected feature '\" + key + \" = \" + features[ key ] + \"'\" );\n        } );\n    }\n\n    return features;\n}\n\nlet supportsPassive:boolean;\n\nfunction supportsPassiveEventListener():boolean {\n\n    let supportsPassiveEventListeners = false;\n\n    // reference https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    try {\n        let opts = Object.defineProperty({}, \"passive\", {\n            get: function() {\n                supportsPassiveEventListeners = true;\n            }\n        });\n        window.addEventListener(\"test\", null, opts);\n    }\n    // tslint:disable-next-line:no-empty\n    catch (e) {}\n\n    return supportsPassiveEventListeners;\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"public api\">\n\n// function signature for the dragImageTranslateOverride hook\nexport type DragImageTranslateOverrideFn = (\n    // corresponding touchmove event\n    event:TouchEvent,\n    // the processed touch event viewport coordinates\n    hoverCoordinates:Point,\n    // the element under the calculated touch coordinates\n    hoveredElement:HTMLElement,\n    // callback for updating the drag image offset\n    translateDragImageFn:( offsetX:number, offsetY:number ) => void\n) => void;\n\nexport interface Config {\n    // flag to force the polyfill being applied and not rely on internal feature detection\n    forceApply?:boolean;\n    // useful for when you want the default drag image but still want to apply\n    // some static offset from touch coordinates to drag image coordinates\n    // defaults to (0,0)\n    dragImageOffset?:Point;\n    // if the dragImage shall be centered on the touch coordinates\n    // defaults to false\n    dragImageCenterOnTouch?:boolean;\n    // the drag and drop operation involves some processing. here you can specify in what interval this processing takes place.\n    // defaults to 150ms\n    iterationInterval?:number;\n    // hook for custom logic that decides if a drag operation should start\n    dragStartConditionOverride?:( event:TouchEvent ) => boolean;\n    // hook for custom logic that can manipulate the drag image translate offset\n    dragImageTranslateOverride?:DragImageTranslateOverrideFn;\n    // hook for custom logic that can override the default action based on the original touch event when the drag never started\n    // be sure to call event.preventDefault() if handling the default action in the override to prevent the browser default.\n    defaultActionOverride?:( event:TouchEvent ) => void;\n}\n\n// default config\nconst config:Config = {\n    iterationInterval: 150,\n};\n\nfunction Initialize( override?:Config ) {\n\n    if( override ) {\n        // overwrite default config with user config\n        Object.keys( override ).forEach( function( key ) {\n            config[ key ] = override[ key ];\n        } );\n    }\n\n    // only do feature detection when config does not force apply the polyfill\n    if( !config.forceApply ) {\n\n        // feature/browser detection\n        const detectedFeatures = detectFeatures();\n\n        // check if native drag and drop support is there\n        if( detectedFeatures.userAgentSupportingNativeDnD\n            && detectedFeatures.draggable\n            && detectedFeatures.dragEvents ) {\n            // no polyfilling required\n            return;\n        }\n    }\n\n    console.log( \"dnd-poly: Applying mobile drag and drop polyfill.\" );\n\n    supportsPassive = supportsPassiveEventListener();\n\n    // add listeners suitable for detecting a potential drag operation\n    addDocumentListener( \"touchstart\", onTouchstart, false );\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"drag operation start/end\">\n\n// reference the currently active drag operation\nlet activeDragOperation:DragOperationController;\n\n/**\n * event handler listening for initial events that possibly start a drag and drop operation.\n */\nfunction onTouchstart( e:TouchEvent ) {\n\n    console.log( \"dnd-poly: global touchstart\" );\n\n    // From the moment that the user agent is to initiate the drag-and-drop operation,\n    // until the end of the drag-and-drop operation, device input events (e.g. mouse and keyboard events) must be suppressed.\n\n    // only allow one drag operation at a time\n    if( activeDragOperation ) {\n        console.log( \"dnd-poly: drag operation already active\" );\n        return;\n    }\n\n    let dragTarget = tryFindDraggableTarget( e );\n\n    // If there is no such element, then nothing is being dragged; abort these\n    // steps, the drag-and-drop operation is never started.\n    if( !dragTarget ) {\n        return;\n    }\n\n    try {\n        activeDragOperation = new DragOperationController( e, config, <HTMLElement>dragTarget, dragOperationEnded );\n    }\n    catch( err ) {\n        dragOperationEnded( config, e, DragOperationState.CANCELLED );\n        // rethrow exception after cleanup\n        throw err;\n    }\n}\n\n/**\n * Search for a possible draggable item upon an event that can initialize a drag operation.\n */\nfunction tryFindDraggableTarget( event:TouchEvent ):Element {\n\n    //1. Determine what is being dragged, as follows:\n\n    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n    // If the drag operation was invoked on a selection, then it is the selection that is being dragged.\n    //if( (<Element>event.target).nodeType === 3 ) {\n    //\n    //    config.log( \"drag on text\" );\n    //    return <Element>event.target;\n    //}\n    //Otherwise, if the drag operation was invoked on a Document, it is the first element, going up the ancestor chain, starting at the node that the\n    // user tried to drag, that has the IDL attribute draggable set to true.\n    //else {\n\n    let el = <HTMLElement>event.target;\n\n    do {\n        if( el.draggable === false ) {\n            continue;\n        }\n        if( el.getAttribute && el.getAttribute( \"draggable\" ) === \"true\" ) {\n            return el;\n        }\n    } while( (el = <HTMLElement>el.parentNode) && el !== document.body );\n}\n\n/**\n * Implements callback invoked when a drag operation has ended or crashed.\n */\nfunction dragOperationEnded( _config:Config, event:TouchEvent, state:DragOperationState ) {\n\n    // we need to make the default action happen only when no drag operation took place\n    if( state === DragOperationState.POTENTIAL ) {\n\n        console.log( \"dnd-poly: Drag never started. Last event was \" + event.type );\n\n        // when lifecycle hook is present\n        if( _config.defaultActionOverride ) {\n\n            try {\n\n                _config.defaultActionOverride( event );\n\n                if( event.defaultPrevented ) {\n\n                    console.log( \"dnd-poly: defaultActionOverride has taken care of triggering the default action. preventing default on original event\" );\n                }\n\n            }\n            catch( e ) {\n\n                console.log( \"dnd-poly: error in defaultActionOverride: \" + e );\n            }\n        }\n    }\n\n    // reset drag operation container\n    activeDragOperation = null;\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"drag operation\">\n\n/**\n * For tracking the different states of a drag operation.\n */\nconst enum DragOperationState {\n    // initial state of a controller, if no movement is detected the operation ends with this state\n    POTENTIAL,\n    // after movement is detected the drag operation starts and keeps this state until it ends\n    STARTED,\n    // when the drag operation ended normally\n    ENDED,\n    // when the drag operation ended with a cancelled input event\n    CANCELLED\n}\n\n// contains all possible values of the effectAllowed property\nconst enum EFFECT_ALLOWED {\n    NONE      = 0,\n    COPY      = 1,\n    COPY_LINK = 2,\n    COPY_MOVE = 3,\n    LINK      = 4,\n    LINK_MOVE = 5,\n    MOVE      = 6,\n    ALL       = 7\n}\nconst ALLOWED_EFFECTS = [ \"none\", \"copy\", \"copyLink\", \"copyMove\", \"link\", \"linkMove\", \"move\", \"all\" ];\n// contains all possible values of the dropEffect property\nconst enum DROP_EFFECT {\n    NONE = 0,\n    COPY = 1,\n    MOVE = 2,\n    LINK = 3,\n}\nconst DROP_EFFECTS = [ \"none\", \"copy\", \"move\", \"link\" ];\n\n// cross-browser css transform property prefixes\nconst TRANSFORM_CSS_VENDOR_PREFIXES = [ \"\", \"-webkit-\" ];\n// css classes\nconst CLASS_PREFIX = \"dnd-poly-\";\nconst CLASS_DRAG_IMAGE = CLASS_PREFIX + \"drag-image\";\nconst CLASS_DRAG_IMAGE_SNAPBACK = CLASS_PREFIX + \"snapback\";\nconst CLASS_DRAG_OPERATION_ICON = CLASS_PREFIX + \"icon\";\n\n/**\n * Aims to implement the HTML5 d'n'd spec (https://html.spec.whatwg.org/multipage/interaction.html#dnd) as close as it can get.\n * Note that all props that are private should start with an underscore to enable better minification.\n *\n * TODO remove lengthy spec comments in favor of short references to the spec\n */\nclass DragOperationController {\n\n    private _dragOperationState:DragOperationState = DragOperationState.POTENTIAL;\n\n    private _dragImage:HTMLElement;\n    private _dragImageTransforms:string[];\n    private _dragImagePageCoordinates:Point; // the current page coordinates of the dragImage\n    private _dragImageOffset:Point; // offset of the drag image relative to the coordinates\n\n    private _currentHotspotCoordinates:Point;    // the point relative to viewport for determining the immediate user selection\n\n    private _immediateUserSelection:HTMLElement = null;  // the element the user currently hovers while dragging\n    private _currentDropTarget:HTMLElement = null;   // the element that was selected as a valid drop target by the d'n'd operation\n\n    private _dragDataStore:DragDataStore;\n    private _dataTransfer:DataTransfer;\n\n    private _currentDragOperation:string;    // the current drag operation set according to the d'n'd processing model\n\n    private _initialTouch:Touch;  // the identifier for the touch that initiated the drag operation\n    private _touchMoveHandler:EventListener;\n    private _touchEndOrCancelHandler:EventListener;\n    private _lastTouchEvent:TouchEvent;\n\n    private _iterationLock:boolean;\n    private _iterationIntervalId:number;\n\n    constructor( private _initialEvent:TouchEvent,\n                 private _config:Config,\n                 private _sourceNode:HTMLElement,\n                 private _dragOperationEndedCb:( config:Config, event:TouchEvent, state:DragOperationState ) => void ) {\n\n        console.log( \"dnd-poly: setting up potential drag operation..\" );\n\n        this._lastTouchEvent = _initialEvent;\n        this._initialTouch = _initialEvent.changedTouches[ 0 ];\n\n        // create bound event listeners\n        this._touchMoveHandler = this._onTouchMove.bind( this );\n        this._touchEndOrCancelHandler = this._onTouchEndOrCancel.bind( this );\n        addDocumentListener( \"touchmove\", this._touchMoveHandler, false );\n        addDocumentListener( \"touchend\", this._touchEndOrCancelHandler, false );\n        addDocumentListener( \"touchcancel\", this._touchEndOrCancelHandler, false );\n\n        // the only thing we do is setup the touch listeners. if drag will really start is decided in touch move handler.\n\n        //<spec>\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 3. Establish which DOM node is the source node, as follows:\n        // If it is a selection that is being dragged, then the source node is the text node that the user started the drag on (typically the text node\n        // that the user originally clicked). If the user did not specify a particular node, for example if the user just told the user agent to begin\n        // a drag of \"the selection\", then the source node is the first text node containing a part of the selection.  Otherwise, if it is an element\n        // that is being dragged, then the source node is the element that is being dragged.  Otherwise, the source node is part of another document or\n        // application. When this specification requires that an event be dispatched at the source node in this case, the user agent must instead\n        // follow the platform-specific conventions relevant to that situation.\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 4. Determine the list of dragged nodes, as follows:\n\n        //    If it is a selection that is being dragged, then the list of dragged nodes contains, in tree order, every node that is partially or\n        // completely included in the selection (including all their ancestors).\n\n        //    Otherwise, the list of dragged nodes contains only the source node, if any.\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 5. If it is a selection that is being dragged, then add an item to the drag data store item list, with its properties set as follows:\n\n        //The drag data item type string\n        //\"text/plain\"\n        //The drag data item kind\n        //Plain Unicode string\n        //The actual data\n        //The text of the selection\n        //Otherwise, if any files are being dragged, then add one item per file to the drag data store item list, with their properties set as follows:\n        //\n        //The drag data item type string\n        //The MIME type of the file, if known, or \"application/octet-stream\" otherwise.\n        //    The drag data item kind\n        //File\n        //The actual data\n        //The file's contents and name.\n        //Dragging files can currently only happen from outside a browsing context, for example from a file system manager application.\n        //\n        //    If the drag initiated outside of the application, the user agent must add items to the drag data store item list as appropriate for the data\n        // being dragged, honoring platform conventions where appropriate; however, if the platform conventions do not use MIME types to label dragged\n        // data, the user agent must make a best-effort attempt to map the types to MIME types, and, in any case, all the drag data item type strings must\n        // be converted to ASCII lowercase.  Perform drag-and-drop initialization steps defined in any other applicable specifications.\n\n        //</spec>\n    }\n\n    //<editor-fold desc=\"setup/teardown\">\n\n    /**\n     * Setup dragImage, input listeners and the drag\n     * and drop process model iteration interval.\n     */\n    private _setup():boolean {\n        console.log( \"dnd-poly: starting drag and drop operation\" );\n\n        this._dragOperationState = DragOperationState.STARTED;\n\n        this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n\n        this._dragDataStore = {\n            _data: {},\n            _effectAllowed: undefined,\n            _mode: DragDataStoreMode.PROTECTED,\n            _types: [],\n        };\n\n        this._currentHotspotCoordinates = {\n            x: null,\n            y: null\n        };\n\n        this._dragImagePageCoordinates = {\n            x: null,\n            y: null\n        };\n\n        let dragImageSrc:HTMLElement = this._sourceNode;\n\n        this._dataTransfer = new DataTransfer( this._dragDataStore, ( element:HTMLElement, x:number, y:number ) => {\n\n            dragImageSrc = element;\n\n            if( typeof x === \"number\" || typeof y === \"number\" ) {\n                this._dragImageOffset = {\n                    x: x || 0,\n                    y: y || 0\n                };\n            }\n        } );\n\n        // 9. Fire a DND event named dragstart at the source node.\n        this._dragDataStore._mode = DragDataStoreMode.READWRITE;\n        this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n        if( dispatchDragEvent( \"dragstart\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) ) {\n            console.log( \"dnd-poly: dragstart cancelled\" );\n            // dragstart has been prevented -> cancel d'n'd\n            this._dragOperationState = DragOperationState.CANCELLED;\n            this._cleanup();\n            return false;\n        }\n\n        updateCentroidCoordinatesOfTouchesIn( \"page\", this._lastTouchEvent, this._dragImagePageCoordinates );\n        this._dragImage = createDragImage( dragImageSrc );\n        this._dragImageTransforms = extractTransformStyles( this._dragImage );\n\n        if( !this._dragImageOffset ) {\n\n            // apply specific offset\n            if( this._config.dragImageOffset ) {\n\n                this._dragImageOffset = {\n                    x: this._config.dragImageOffset.x,\n                    y: this._config.dragImageOffset.y\n                };\n            }\n            // center drag image on touch coordinates\n            else if( this._config.dragImageCenterOnTouch ) {\n\n                const cs = getComputedStyle( dragImageSrc );\n                this._dragImageOffset = {\n                    x: 0 - parseInt( cs.marginLeft, 10 ),\n                    y: 0 - parseInt( cs.marginTop, 10 )\n                };\n            }\n            // by default initialize drag image offset the same as desktop\n            else {\n\n                const targetRect = dragImageSrc.getBoundingClientRect();\n                const cs = getComputedStyle( dragImageSrc );\n                this._dragImageOffset = {\n                    x: targetRect.left - this._initialTouch.clientX - parseInt( cs.marginLeft, 10 ) + targetRect.width / 2,\n                    y: targetRect.top - this._initialTouch.clientY - parseInt( cs.marginTop, 10 ) + targetRect.height / 2\n                };\n            }\n        }\n\n        translateDragImage( this._dragImage, this._dragImagePageCoordinates, this._dragImageTransforms, this._dragImageOffset, this._config.dragImageCenterOnTouch );\n        document.body.appendChild( this._dragImage );\n\n        // 10. Initiate the drag-and-drop operation in a manner consistent with platform conventions, and as described below.\n        this._iterationIntervalId = setInterval( () => {\n\n            // If the user agent is still performing the previous iteration of the sequence (if any) when the next iteration becomes due,\n            // abort these steps for this iteration (effectively \"skipping missed frames\" of the drag-and-drop operation).\n            if( this._iterationLock ) {\n                console.log( \"dnd-poly: iteration skipped because previous iteration hast not yet finished.\" );\n                return;\n            }\n            this._iterationLock = true;\n\n            this._dragAndDropProcessModelIteration();\n\n            this._iterationLock = false;\n        }, this._config.iterationInterval );\n\n        return true;\n    }\n\n    private _cleanup() {\n\n        console.log( \"dnd-poly: cleanup\" );\n\n        if( this._iterationIntervalId ) {\n            clearInterval( this._iterationIntervalId );\n            this._iterationIntervalId = null;\n        }\n\n        removeDocumentListener( \"touchmove\", this._touchMoveHandler );\n        removeDocumentListener( \"touchend\", this._touchEndOrCancelHandler );\n        removeDocumentListener( \"touchcancel\", this._touchEndOrCancelHandler );\n\n        if( this._dragImage ) {\n            this._dragImage.parentNode.removeChild( this._dragImage );\n            this._dragImage = null;\n        }\n\n        this._dragOperationEndedCb( this._config, this._lastTouchEvent, this._dragOperationState );\n    }\n\n    //</editor-fold>\n\n    //<editor-fold desc=\"touch handlers\">\n\n    private _onTouchMove( event:TouchEvent ) {\n\n        // filter unrelated touches\n        if( isTouchIdentifierContainedInTouchEvent( event, this._initialTouch.identifier ) === false ) {\n            return;\n        }\n\n        // update the reference to the last received touch event\n        this._lastTouchEvent = event;\n\n        // drag operation did not start yet but on movement it should start\n        if( this._dragOperationState === DragOperationState.POTENTIAL ) {\n\n            let startDrag:boolean;\n\n            // is a lifecycle hook present?\n            if( this._config.dragStartConditionOverride ) {\n\n                try {\n                    startDrag = this._config.dragStartConditionOverride( event );\n                }\n                catch( e ) {\n                    console.error( \"dnd-poly: error in dragStartConditionOverride hook: \" + e );\n                    startDrag = false;\n                }\n            }\n            else {\n\n                // by default only allow a single moving finger to initiate a drag operation\n                startDrag = (event.touches.length === 1);\n            }\n\n            if( !startDrag ) {\n\n                this._cleanup();\n                return;\n            }\n\n            // setup will return true when drag operation starts\n            if( this._setup() === true ) {\n\n                // prevent scrolling when drag operation starts\n                this._initialEvent.preventDefault();\n                event.preventDefault();\n            }\n\n            return;\n        }\n\n        console.log( \"dnd-poly: moving draggable..\" );\n\n        // we emulate d'n'd so we dont want any defaults to apply\n        event.preventDefault();\n\n        // populate shared coordinates from touch event\n        updateCentroidCoordinatesOfTouchesIn( \"client\", event, this._currentHotspotCoordinates );\n        updateCentroidCoordinatesOfTouchesIn( \"page\", event, this._dragImagePageCoordinates );\n\n        if( this._config.dragImageTranslateOverride ) {\n\n            try {\n\n                let handledDragImageTranslate = false;\n\n                this._config.dragImageTranslateOverride(\n                    event,\n                    {\n                        x: this._currentHotspotCoordinates.x,\n                        y: this._currentHotspotCoordinates.y\n                    },\n                    this._immediateUserSelection,\n                    ( offsetX:number, offsetY:number ) => {\n\n                        // preventing translation of drag image when there was a drag operation cleanup meanwhile\n                        if( !this._dragImage ) {\n                            return;\n                        }\n\n                        handledDragImageTranslate = true;\n\n                        this._currentHotspotCoordinates.x += offsetX;\n                        this._currentHotspotCoordinates.y += offsetY;\n                        this._dragImagePageCoordinates.x += offsetX;\n                        this._dragImagePageCoordinates.y += offsetY;\n\n                        translateDragImage(\n                            this._dragImage,\n                            this._dragImagePageCoordinates,\n                            this._dragImageTransforms,\n                            this._dragImageOffset,\n                            this._config.dragImageCenterOnTouch\n                        );\n                    }\n                );\n\n                if( handledDragImageTranslate ) {\n                    return;\n                }\n            }\n            catch( e ) {\n                console.log( \"dnd-poly: error in dragImageTranslateOverride hook: \" + e );\n            }\n        }\n\n        translateDragImage( this._dragImage, this._dragImagePageCoordinates, this._dragImageTransforms, this._dragImageOffset, this._config.dragImageCenterOnTouch );\n    }\n\n    private _onTouchEndOrCancel( event:TouchEvent ) {\n\n        // filter unrelated touches\n        if( isTouchIdentifierContainedInTouchEvent( event, this._initialTouch.identifier ) === false ) {\n            return;\n        }\n\n        // let the dragImageTranslateOverride know that its over\n        if( this._config.dragImageTranslateOverride ) {\n            try {\n                /* tslint:disable */\n                this._config.dragImageTranslateOverride( undefined, undefined, undefined, function() {\n                } );\n            }\n            catch( e ) {\n                console.log( \"dnd-poly: error in dragImageTranslateOverride hook: \" + e );\n            }\n        }\n\n        // drag operation did not even start\n        if( this._dragOperationState === DragOperationState.POTENTIAL ) {\n            this._cleanup();\n            return;\n        }\n\n        // we emulate d'n'd so we dont want any defaults to apply\n        event.preventDefault();\n\n        this._dragOperationState = (event.type === \"touchcancel\") ? DragOperationState.CANCELLED : DragOperationState.ENDED;\n    }\n\n    //</editor-fold>\n\n    //<editor-fold desc=\"dnd spec logic\">\n\n    /**\n     * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n     */\n    private _dragAndDropProcessModelIteration():void {\n\n        if( DEBUG ) {\n            var debug_class                = CLASS_PREFIX + \"debug\",\n                debug_class_user_selection = CLASS_PREFIX + \"immediate-user-selection\",\n                debug_class_drop_target    = CLASS_PREFIX + \"current-drop-target\";\n        }\n\n        const previousDragOperation = this._currentDragOperation;\n\n        // Fire a DND event named drag event at the source node.\n        this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n        this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n        const dragCancelled = dispatchDragEvent( \"drag\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer );\n        if( dragCancelled ) {\n            console.log( \"dnd-poly: drag event cancelled.\" );\n            // If this event is canceled, the user agent must set the current drag operation to \"none\" (no drag operation).\n            this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n        }\n\n        // Otherwise, if the user ended the drag-and-drop operation (e.g. by releasing the mouse button in a mouse-driven drag-and-drop interface),\n        // or if the drag event was canceled, then this will be the last iteration.\n        if( dragCancelled || this._dragOperationState === DragOperationState.ENDED || this._dragOperationState === DragOperationState.CANCELLED ) {\n\n            const dragFailed = this._dragOperationEnded( this._dragOperationState );\n\n            // if drag failed transition snap back\n            if( dragFailed ) {\n\n                applyDragImageSnapback( this._sourceNode, this._dragImage, this._dragImageTransforms, () => {\n                    this._finishDragOperation();\n                } );\n                return;\n            }\n\n            // Otherwise immediately\n            // Fire a DND event named dragend at the source node.\n            this._finishDragOperation();\n            return;\n        }\n\n        // If the drag event was not canceled and the user has not ended the drag-and-drop operation,\n        // check the state of the drag-and-drop operation, as follows:\n        const newUserSelection:HTMLElement = <HTMLElement>document.elementFromPoint( this._currentHotspotCoordinates.x, this._currentHotspotCoordinates.y );\n\n        console.log( \"dnd-poly: new immediate user selection is: \" + newUserSelection );\n\n        const previousTargetElement = this._currentDropTarget;\n\n        // If the user is indicating a different immediate user selection than during the last iteration (or if this is the first iteration),\n        // and if this immediate user selection is not the same as the current target element,\n        // then fire a DND event named dragexit at the current target element,\n        // and then update the current target element as follows:\n        if( newUserSelection !== this._immediateUserSelection && newUserSelection !== this._currentDropTarget ) {\n\n            if( DEBUG ) {\n\n                if( this._immediateUserSelection ) {\n                    this._immediateUserSelection.classList.remove( debug_class_user_selection );\n                }\n\n                if( newUserSelection ) {\n                    newUserSelection.classList.add( debug_class );\n                    newUserSelection.classList.add( debug_class_user_selection );\n                }\n            }\n\n            this._immediateUserSelection = newUserSelection;\n\n            if( this._currentDropTarget !== null ) {\n                this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n                dispatchDragEvent( \"dragexit\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false );\n            }\n\n            // If the new immediate user selection is null\n            if( this._immediateUserSelection === null ) {\n                //Set the current target element to null also.\n                this._currentDropTarget = this._immediateUserSelection;\n\n                console.log( \"dnd-poly: current drop target changed to null\" );\n            }\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // If the new immediate user selection is in a non-DOM document or application\n            // else if() {\n            //      Set the current target element to the immediate user selection.\n            //      this.currentDropTarget = this.immediateUserSelection;\n            //      return;\n            // }\n            // Otherwise\n            else {\n                // Fire a DND event named dragenter at the immediate user selection.\n                //the polyfill cannot determine if a handler even exists as browsers do to silently\n                // allow drop when no listener existed, so this event MUST be handled by the client\n                this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = determineDropEffect( this._dragDataStore._effectAllowed, this._sourceNode );\n                if( dispatchDragEvent( \"dragenter\", this._immediateUserSelection, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) ) {\n                    console.log( \"dnd-poly: dragenter default prevented\" );\n                    // If the event is canceled, then set the current target element to the immediate user selection.\n                    this._currentDropTarget = this._immediateUserSelection;\n                    this._currentDragOperation = determineDragOperation( this._dataTransfer.effectAllowed, this._dataTransfer.dropEffect );\n                }\n                // Otherwise, run the appropriate step from the following list:\n                else {\n\n                    // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n                    //console.log( \"dnd-poly: dragenter not prevented, searching for dropzone..\" );\n                    //var newTarget = DragOperationController.FindDropzoneElement( this.immediateUserSelection );\n\n                    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                    // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state) or an\n                    // editable element, and the drag data store item list has an item with the drag data item type string \"text/plain\" and the drag data\n                    // item kind Plain Unicode string\n                    //if( ElementIsTextDropzone( this.immediateUserSelection, this.dragDataStore ) ) {\n                    //Set the current target element to the immediate user selection anyway.\n                    //this.currentDropTarget = this.immediateUserSelection;\n                    //}\n                    //else\n                    // If the current target element is an element with a dropzone attribute that matches the drag data store\n                    //if( newTarget === this.immediateUserSelection &&\n                    //    DragOperationController.GetOperationForMatchingDropzone( this.immediateUserSelection, this.dragDataStore ) !== \"none\" ) {\n                    // Set the current target element to the immediate user selection anyway.\n                    //    this.currentDropTarget = this.immediateUserSelection;\n                    //}\n                    // If the immediate user selection is an element that itself has an ancestor element\n                    // with a dropzone attribute that matches the drag data store\n                    // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n                    //else if( newTarget !== null && DragOperationController.GetOperationForMatchingDropzone( newTarget, this.dragDataStore ) ) {\n\n                    // If the immediate user selection is new target, then leave the current target element unchanged.\n\n                    // Otherwise, fire a DND event named dragenter at new target, with the current target element\n                    // as the specific related target. Then, set the current target element to new target,\n                    // regardless of whether that event was canceled or not.\n                    //this.dragenter( newTarget, this.currentDropTarget );\n                    //this.currentDropTarget = newTarget;\n                    //}\n                    // If the current target element is not the body element\n                    //else\n                    if( this._immediateUserSelection !== document.body ) {\n                        // Fire a DND event named dragenter at the body element, and set the current target element to the body element, regardless of\n                        // whether that event was canceled or not.\n                        // Note: If the body element is null, then the event will be fired at the Document object (as\n                        // required by the definition of the body element), but the current target element would be set to null, not the Document object.\n\n                        // We do not listen to what the spec says here because this results in doubled events on the body/document because if the first one\n                        // was not cancelled it will have bubbled up to the body already ;)\n                        //  this.dragenter( window.document.body );\n                        this._currentDropTarget = document.body;\n                    }\n                    // Otherwise\n                    //else {\n                    // leave the current drop target unchanged\n                    //}\n                }\n            }\n        }\n\n        // If the previous step caused the current target element to change,\n        // and if the previous target element was not null or a part of a non-DOM document,\n        // then fire a DND event named dragleave at the previous target element.\n        if( previousTargetElement !== this._currentDropTarget && (isDOMElement( previousTargetElement ) ) ) {\n\n            if( DEBUG ) {\n                previousTargetElement.classList.remove( debug_class_drop_target );\n            }\n\n            console.log( \"dnd-poly: current drop target changed.\" );\n\n            this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n            this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n            dispatchDragEvent( \"dragleave\", previousTargetElement, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false, this._currentDropTarget );\n        }\n\n        // If the current target element is a DOM element, then fire a DND event named dragover at this current target element.\n        if( isDOMElement( this._currentDropTarget ) ) {\n\n            if( DEBUG ) {\n                this._currentDropTarget.classList.add( debug_class );\n                this._currentDropTarget.classList.add( debug_class_drop_target );\n            }\n\n            // If the dragover event is not canceled, run the appropriate step from the following list:\n            this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n            this._dataTransfer.dropEffect = determineDropEffect( this._dragDataStore._effectAllowed, this._sourceNode );\n            if( dispatchDragEvent( \"dragover\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) === false ) {\n\n                console.log( \"dnd-poly: dragover not prevented on possible drop-target.\" );\n                // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n\n                // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state) or\n                // an editable element, and the drag data store item list has an item with the drag data item type string \"text/plain\" and the drag\n                // data item kind Plain Unicode string\n                //if( ElementIsTextDropzone( this.currentDropTarget, this.dragDataStore ) ) {\n                // Set the current drag operation to either \"copy\" or \"move\", as appropriate given the platform conventions.\n                //this.currentDragOperation = \"copy\"; //or move. spec says its platform specific behaviour.\n                //}\n                //else {\n                // If the current target element is an element with a dropzone attribute that matches the drag data store\n                //this.currentDragOperation = DragOperationController.GetOperationForMatchingDropzone( this.currentDropTarget, this.dragDataStore );\n                //}\n                // when dragover is not prevented and no dropzones are there, no drag operation\n                this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n            }\n            // Otherwise (if the dragover event is canceled), set the current drag operation based on the values of the effectAllowed and\n            // dropEffect attributes of the DragEvent object's dataTransfer object as they stood after the event dispatch finished\n            else {\n\n                console.log( \"dnd-poly: dragover prevented.\" );\n\n                this._currentDragOperation = determineDragOperation( this._dataTransfer.effectAllowed, this._dataTransfer.dropEffect );\n            }\n        }\n\n        console.log( \"dnd-poly: d'n'd iteration ended. current drag operation: \" + this._currentDragOperation );\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // Otherwise, if the current target element is not a DOM element, use platform-specific mechanisms to determine what drag operation is\n        // being performed (none, copy, link, or move), and set the current drag operation accordingly.\n\n        //Update the drag feedback (e.g. the mouse cursor) to match the current drag operation, as follows:\n        // ---------------------------------------------------------------------------------------------------------\n        // Drag operation   |\tFeedback\n        // \"copy\"\t        |  Data will be copied if dropped here.\n        // \"link\"\t        |  Data will be linked if dropped here.\n        // \"move\"\t        |  Data will be moved if dropped here.\n        // \"none\"\t        |  No operation allowed, dropping here will cancel the drag-and-drop operation.\n        // ---------------------------------------------------------------------------------------------------------\n\n        if( previousDragOperation !== this._currentDragOperation ) {\n            this._dragImage.classList.remove( CLASS_PREFIX + previousDragOperation );\n        }\n\n        const currentDragOperationClass = CLASS_PREFIX + this._currentDragOperation;\n\n        if( this._dragImage.classList.contains( currentDragOperationClass ) === false ) {\n            this._dragImage.classList.add( currentDragOperationClass );\n        }\n    }\n\n    /**\n     * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n     */\n    private _dragOperationEnded( state:DragOperationState ):boolean {\n\n        console.log( \"dnd-poly: drag operation end detected with \" + this._currentDragOperation );\n\n        if( DEBUG ) {\n\n            var debug_class_user_selection = CLASS_PREFIX + \"immediate-user-selection\",\n                debug_class_drop_target    = CLASS_PREFIX + \"current-drop-target\";\n\n            if( this._currentDropTarget ) {\n                this._currentDropTarget.classList.remove( debug_class_drop_target );\n\n            }\n            if( this._immediateUserSelection ) {\n                this._immediateUserSelection.classList.remove( debug_class_user_selection );\n            }\n        }\n\n        //var dropped:boolean = undefined;\n\n        // Run the following steps, then stop the drag-and-drop operation:\n\n        // If the current drag operation is \"none\" (no drag operation), or,\n        // if the user ended the drag-and-drop operation by canceling it (e.g. by hitting the Escape key), or\n        // if the current target element is null, then the drag operation failed.\n        const dragFailed = (this._currentDragOperation === DROP_EFFECTS[ DROP_EFFECT.NONE ]\n                            || this._currentDropTarget === null\n                            || state === DragOperationState.CANCELLED);\n        if( dragFailed ) {\n\n            // Run these substeps:\n\n            // Let dropped be false.\n            //dropped = false;\n\n            // If the current target element is a DOM element, fire a DND event named dragleave at it;\n            if( isDOMElement( this._currentDropTarget ) ) {\n                this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n                dispatchDragEvent( \"dragleave\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false );\n            }\n\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // otherwise, if it is not null, use platform-specific conventions for drag cancellation.\n            //else if( this.currentDropTarget !== null ) {\n            //}\n        }\n        // Otherwise, the drag operation was as success; run these substeps:\n        else {\n\n            // Let dropped be true.\n            //dropped = true;\n\n            // If the current target element is a DOM element, fire a DND event named drop at it;\n            if( isDOMElement( this._currentDropTarget ) ) {\n\n                // If the event is canceled, set the current drag operation to the value of the dropEffect attribute of the\n                // DragEvent object's dataTransfer object as it stood after the event dispatch finished.\n\n                this._dragDataStore._mode = DragDataStoreMode.READONLY;\n                this._dataTransfer.dropEffect = this._currentDragOperation;\n                if( dispatchDragEvent( \"drop\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) ===\n                    true ) {\n\n                    this._currentDragOperation = this._dataTransfer.dropEffect;\n                }\n                // Otherwise, the event is not canceled; perform the event's default action, which depends on the exact target as follows:\n                else {\n\n                    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                    // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state)\n                    // or an editable element,\n                    // and the drag data store item list has an item with the drag data item type string \"text/plain\"\n                    // and the drag data item kind Plain Unicode string\n                    //if( ElementIsTextDropzone( this.currentDropTarget, this.dragDataStore ) ) {\n                    // Insert the actual data of the first item in the drag data store item list to have a drag data item type string of\n                    // \"text/plain\" and a drag data item kind that is Plain Unicode string into the text field or editable element in a manner\n                    // consistent with platform-specific conventions (e.g. inserting it at the current mouse cursor position, or inserting it at\n                    // the end of the field).\n                    //}\n                    // Otherwise\n                    //else {\n                    // Reset the current drag operation to \"none\".\n                    this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n                    //}\n                }\n            }\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // otherwise, use platform-specific conventions for indicating a drop.\n            //else {\n            //}\n        }\n\n        return dragFailed;\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        //if( this.dragend( this.sourceNode ) ) {\n        //    return;\n        //}\n\n        // Run the appropriate steps from the following list as the default action of the dragend event:\n\n        //if( !dropped ) {\n        //    return;\n        //}\n        // dropped is true\n\n        //if( this.currentDragOperation !== \"move\" ) {\n        //    return;\n        //}\n        //// drag operation is move\n        //\n        //if( ElementIsTextDropzone( this.currentDropTarget ) === false ) {\n        //    return;\n        //}\n        //// element is textfield\n        //\n        //// and the source of the drag-and-drop operation is a selection in the DOM\n        //if( this.sourceNode.nodeType === 1 ) {\n        //    // The user agent should delete the range representing the dragged selection from the DOM.\n        //}\n        //// and the source of the drag-and-drop operation is a selection in a text field\n        //else if( this.sourceNode.nodeType === 3 ) {\n        //    // The user agent should delete the dragged selection from the relevant text field.\n        //}\n        //// Otherwise, The event has no default action.\n    }\n\n    // dispatch dragend event and cleanup drag operation\n    private _finishDragOperation():void {\n        console.log( \"dnd-poly: dragimage snap back transition ended\" );\n\n        // Fire a DND event named dragend at the source node.\n        this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n        this._dataTransfer.dropEffect = this._currentDragOperation;\n        dispatchDragEvent( \"dragend\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false );\n\n        // drag operation over and out\n        this._dragOperationState = DragOperationState.ENDED;\n        this._cleanup();\n    }\n\n    //</editor-fold>\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"DataTransfer/DragDataStore\">\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#drag-data-store-mode\n */\nconst enum DragDataStoreMode {\n    _DISCONNECTED, // adding an extra mode here because we need a special state to disconnect the data store from dataTransfer instance\n    READONLY,\n    READWRITE,\n    PROTECTED\n}\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#the-drag-data-store\n */\ninterface DragDataStore {\n    _mode:DragDataStoreMode;\n    _data:{[type:string]:any};\n    _types:Array<string>;\n    _effectAllowed:string;\n}\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#datatransfer\n * TODO fail with errors when somebody uses it wrong so they know they are doing it wrong?\n */\nclass DataTransfer {\n\n    private _dropEffect:string = DROP_EFFECTS[ DROP_EFFECT.NONE ];\n\n    constructor( private _dataStore:DragDataStore,\n                 private _setDragImageHandler:( image:Element, x:number, y:number ) => void ) {\n    }\n\n    //public get files():FileList {\n    //    return undefined;\n    //}\n    //\n    //public get items():DataTransferItemList {\n    //    return undefined;\n    //}\n\n    public get types():ReadonlyArray<string> {\n        if( this._dataStore._mode !== DragDataStoreMode._DISCONNECTED ) {\n            return Object.freeze( this._dataStore._types );\n        }\n    }\n\n    public setData( type:string, data:string ):void {\n        if( this._dataStore._mode === DragDataStoreMode.READWRITE ) {\n\n            if( type.indexOf( \" \" ) > -1 ) {\n                throw new Error( \"illegal arg: type contains space\" );\n            }\n\n            this._dataStore._data[ type ] = data;\n\n            if( this._dataStore._types.indexOf( type ) === -1 ) {\n                this._dataStore._types.push( type );\n            }\n        }\n    }\n\n    public getData( type:string ):string {\n        if( this._dataStore._mode === DragDataStoreMode.READONLY\n            || this._dataStore._mode === DragDataStoreMode.READWRITE ) {\n            return this._dataStore._data[ type ] || \"\";\n        }\n    }\n\n    public clearData( format?:string ):void {\n        if( this._dataStore._mode === DragDataStoreMode.READWRITE ) {\n            // delete data for format\n            if( format && this._dataStore._data[ format ] ) {\n                delete this._dataStore._data[ format ];\n                var index = this._dataStore._types.indexOf( format );\n                if( index > -1 ) {\n                    this._dataStore._types.splice( index, 1 );\n                }\n                return;\n            }\n            // delete all data\n            this._dataStore._data = {};\n            this._dataStore._types = [];\n        }\n    }\n\n    public setDragImage( image:Element, x:number, y:number ):void {\n        if( this._dataStore._mode === DragDataStoreMode.READWRITE ) {\n            this._setDragImageHandler( image, x, y );\n        }\n    }\n\n    public get effectAllowed() {\n        return this._dataStore._effectAllowed;\n    }\n\n    public set effectAllowed( value ) {\n        if( this._dataStore._mode === DragDataStoreMode.READWRITE\n            && ALLOWED_EFFECTS.indexOf( value ) > -1 ) {\n            this._dataStore._effectAllowed = value;\n        }\n    }\n\n    public get dropEffect() {\n        return this._dropEffect;\n    }\n\n    public set dropEffect( value ) {\n        if( this._dataStore._mode !== DragDataStoreMode._DISCONNECTED\n            && ALLOWED_EFFECTS.indexOf( value ) > -1 ) {\n            this._dropEffect = value;\n        }\n    }\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"util\">\n\nexport interface Point {\n    x:number;\n    y:number;\n}\n\nfunction addDocumentListener( ev:string, handler:EventListener, passive:boolean = true ) {\n    (document.addEventListener as WhatWGAddEventListener)( ev, handler, supportsPassive ? { passive:passive } : false );\n}\n\nfunction removeDocumentListener( ev:string, handler:EventListener ) {\n    document.removeEventListener( ev, handler );\n}\n\nfunction average( array:Array<number> ) {\n    if( array.length === 0 ) {\n        return 0;\n    }\n    return array.reduce( (function( s, v ) {\n            return v + s;\n        }), 0 ) / array.length;\n}\n\nfunction isDOMElement( object:any ) {\n    return object && object.tagName;\n}\n\nfunction isTouchIdentifierContainedInTouchEvent( newTouch:TouchEvent, touchIdentifier:number ) {\n    for( let i = 0; i < newTouch.changedTouches.length; i++ ) {\n        const touch = newTouch.changedTouches[ i ];\n        if( touch.identifier === touchIdentifier ) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction createDragEventFromTouch( targetElement:Element,\n                                   e:TouchEvent,\n                                   type:string,\n                                   cancelable:boolean,\n                                   window:Window,\n                                   dataTransfer:DataTransfer,\n                                   relatedTarget:Element = null ) {\n\n    const touch:Touch = e.changedTouches[ 0 ];\n\n    const dndEvent:DragEvent = <DragEvent>new Event( type, {\n        bubbles: true,\n        cancelable: cancelable\n    } );\n\n    // cast our polyfill\n    (dndEvent as any).dataTransfer = <any>dataTransfer;\n    (dndEvent as any).relatedTarget = relatedTarget;\n\n    // set the coordinates\n    (dndEvent as any).screenX = touch.screenX;\n    (dndEvent as any).screenY = touch.screenY;\n    (dndEvent as any).clientX = touch.clientX;\n    (dndEvent as any).clientY = touch.clientY;\n    (dndEvent as any).pageX = touch.pageX;\n    (dndEvent as any).pageY = touch.pageY;\n\n    const targetRect = targetElement.getBoundingClientRect();\n    (dndEvent as any).offsetX = dndEvent.clientX - targetRect.left;\n    (dndEvent as any).offsetY = dndEvent.clientY - targetRect.top;\n\n    return dndEvent;\n}\n\n/**\n * Calc center of polygon spanned by multiple touches in page (full page size, with hidden scrollable area) coordinates\n * or in viewport (screen coordinates) coordinates.\n */\nfunction updateCentroidCoordinatesOfTouchesIn( coordinateProp:string, event:TouchEvent, outPoint:Point ):void {\n    const pageXs:Array<number> = [], pageYs:Array<number> = [];\n    for( let i = 0; i < event.touches.length; i++ ) {\n        const touch = event.touches[ i ];\n        pageXs.push( touch[ coordinateProp + \"X\" ] );\n        pageYs.push( touch[ coordinateProp + \"Y\" ] );\n    }\n    outPoint.x = average( pageXs );\n    outPoint.y = average( pageYs );\n}\n\nfunction prepareNodeCopyAsDragImage( srcNode:HTMLElement, dstNode:HTMLElement ) {\n    // Is this node an element?\n    if( srcNode.nodeType === 1 ) {\n\n        // Clone the style\n        const cs = getComputedStyle( srcNode );\n        for( let i = 0; i < cs.length; i++ ) {\n            const csName = cs[ i ];\n            dstNode.style.setProperty( csName, cs.getPropertyValue( csName ), cs.getPropertyPriority( csName ) );\n        }\n\n        // no interaction with the drag image, pls! this is also important to make the drag image transparent for hit-testing\n        // hit testing is done in the drag and drop iteration to find the element the user currently is hovering over while dragging.\n        // if pointer-events is not none or a browser does behave in an unexpected way than the hit test transparency on the drag image\n        // will break\n        dstNode.style.pointerEvents = \"none\";\n\n        // Remove any potential conflict attributes\n        dstNode.removeAttribute( \"id\" );\n        dstNode.removeAttribute( \"class\" );\n        dstNode.removeAttribute( \"draggable\" );\n    }\n\n    // Do the same for the children\n    if( srcNode.hasChildNodes() ) {\n        for( let i = 0; i < srcNode.childNodes.length; i++ ) {\n            prepareNodeCopyAsDragImage( <HTMLElement>srcNode.childNodes[ i ], <HTMLElement>dstNode.childNodes[ i ] );\n        }\n    }\n}\n\nfunction createDragImage( sourceNode:HTMLElement ):HTMLElement {\n\n    const dragImage = <HTMLElement>sourceNode.cloneNode( true );\n\n    // this removes any id's and stuff that could interfere with drag and drop\n    prepareNodeCopyAsDragImage( sourceNode, dragImage );\n\n    // set layout styles for freely moving it around\n    dragImage.style.position = \"absolute\";\n    dragImage.style.left = \"0px\";\n    dragImage.style.top = \"0px\";\n    // on top of all\n    dragImage.style.zIndex = \"999999\";\n\n    // add polyfill class for default styling\n    dragImage.classList.add( CLASS_DRAG_IMAGE );\n    dragImage.classList.add( CLASS_DRAG_OPERATION_ICON );\n\n    return dragImage;\n}\n\nfunction extractTransformStyles( sourceNode:HTMLElement ):string[] {\n\n    return TRANSFORM_CSS_VENDOR_PREFIXES.map( function( prefix ) {\n\n        let transform = sourceNode.style[ prefix + \"transform\" ];\n\n        if( !transform || transform === \"none\" ) {\n            return \"\";\n        }\n\n        // TODO what about translateX(x), translateY(x), translateZ(z), translate3d(x,y,z), matrix(*,*,*,*,x,y) ?\n\n        // removes translate(x,y)\n        return transform.replace( /translate\\(\\D*\\d+[^,]*,\\D*\\d+[^,]*\\)\\s*/g, \"\" );\n    } );\n}\n\nfunction translateDragImage( dragImage:HTMLElement, pnt:Point, originalTransforms:string[], offset?:Point, centerOnCoordinates = true ):void {\n\n    let x = pnt.x, y = pnt.y;\n\n    if( offset ) {\n        x += offset.x;\n        y += offset.y;\n    }\n\n    if( centerOnCoordinates ) {\n        x -= (parseInt( <any>dragImage.offsetWidth, 10 ) / 2);\n        y -= (parseInt( <any>dragImage.offsetHeight, 10 ) / 2);\n    }\n\n    // using translate3d for best performance\n    const translate = \"translate3d(\" + x + \"px,\" + y + \"px, 0)\";\n\n    for( let i = 0; i < TRANSFORM_CSS_VENDOR_PREFIXES.length; i++ ) {\n        const transformProp = TRANSFORM_CSS_VENDOR_PREFIXES[ i ] + \"transform\";\n        dragImage.style[ transformProp ] = translate + \" \" + originalTransforms[ i ];\n    }\n}\n\n/**\n * calculates the coordinates of the drag source and transitions the drag image to those coordinates.\n * the drag operation is finished after the transition has ended.\n */\nfunction applyDragImageSnapback( sourceEl:HTMLElement, dragImage:HTMLElement, dragImageTransforms:string[], transitionEndCb:Function ):void {\n\n    const cs = getComputedStyle( sourceEl );\n\n    if( cs.visibility === \"hidden\" || cs.display === \"none\" ) {\n        console.log( \"dnd-poly: source node is not visible. skipping snapback transition.\" );\n        // shortcut to end the drag operation\n        transitionEndCb();\n        return;\n    }\n\n    console.log( \"dnd-poly: starting dragimage snap back\" );\n\n    // calc source node position\n    const rect = sourceEl.getBoundingClientRect();\n\n    const pnt:Point = {\n        x: rect.left,\n        y: rect.top\n    };\n\n    // add scroll offset of document\n    pnt.x += (document.body.scrollLeft || document.documentElement.scrollLeft);\n    pnt.y += (document.body.scrollTop || document.documentElement.scrollTop);\n\n    //TODO this sometimes fails.. find out when exactly and how to detect\n    pnt.x -= parseInt( cs.marginLeft, 10 );\n    pnt.y -= parseInt( cs.marginTop, 10 );\n\n    // add class containing transition rules\n    dragImage.classList.add( CLASS_DRAG_IMAGE_SNAPBACK );\n\n    const csDragImage = getComputedStyle( dragImage );\n    const durationInS = parseFloat( csDragImage.transitionDuration );\n    const delayInS = parseFloat( csDragImage.transitionDelay );\n    const durationInMs = Math.round( (durationInS + delayInS) * 1000 );\n\n    // apply the translate\n    translateDragImage( dragImage, pnt, dragImageTransforms, undefined, false );\n\n    setTimeout( transitionEndCb, durationInMs );\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"dnd spec util\">\n\n/**\n * Implements \"6.\" in the processing steps defined for a dnd event\n * https://html.spec.whatwg.org/multipage/interaction.html#dragevent\n */\nfunction determineDropEffect( effectAllowed:string, sourceNode:Element ) {\n\n    // uninitialized\n    if( !effectAllowed ) {\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        //if( sourceNode.nodeType === 1 ) {\n        //\n        //return \"move\";\n        //}\n\n        // link\n        if( sourceNode.nodeType === 3 && (<HTMLElement>sourceNode).tagName === \"A\" ) {\n            return DROP_EFFECTS[ DROP_EFFECT.LINK ];\n        }\n\n        // copy\n        return DROP_EFFECTS[ DROP_EFFECT.COPY ];\n    }\n\n    // none\n    if( effectAllowed === ALLOWED_EFFECTS[ EFFECT_ALLOWED.NONE ] ) {\n        return DROP_EFFECTS[ DROP_EFFECT.NONE ];\n    }\n    // copy or all\n    if( effectAllowed.indexOf( ALLOWED_EFFECTS[ EFFECT_ALLOWED.COPY ] ) === 0 || effectAllowed === ALLOWED_EFFECTS[ EFFECT_ALLOWED.ALL ] ) {\n        return DROP_EFFECTS[ DROP_EFFECT.COPY ];\n    }\n    // link\n    if( effectAllowed.indexOf( ALLOWED_EFFECTS[ EFFECT_ALLOWED.LINK ] ) === 0 ) {\n        return DROP_EFFECTS[ DROP_EFFECT.LINK ];\n    }\n    // move\n    if( effectAllowed === ALLOWED_EFFECTS[ EFFECT_ALLOWED.MOVE ] ) {\n        return DROP_EFFECTS[ DROP_EFFECT.MOVE ];\n    }\n\n    // copy\n    return DROP_EFFECTS[ DROP_EFFECT.COPY ];\n}\n\n/**\n * Reference https://html.spec.whatwg.org/multipage/interaction.html#dndevents\n */\nfunction dispatchDragEvent( dragEvent:string,\n                            targetElement:Element,\n                            touchEvent:TouchEvent,\n                            dataStore:DragDataStore,\n                            dataTransfer:DataTransfer,\n                            cancelable = true,\n                            relatedTarget:Element = null ):boolean {\n\n    console.log( \"dnd-poly: dispatching \" + dragEvent );\n\n    if( DEBUG ) {\n        var debug_class                      = CLASS_PREFIX + \"debug\",\n            debug_class_event_target         = CLASS_PREFIX + \"event-target\",\n            debug_class_event_related_target = CLASS_PREFIX + \"event-related-target\";\n        targetElement.classList.add( debug_class );\n        targetElement.classList.add( debug_class_event_target );\n        if( relatedTarget ) {\n            relatedTarget.classList.add( debug_class );\n            relatedTarget.classList.add( debug_class_event_related_target );\n        }\n    }\n\n    const leaveEvt = createDragEventFromTouch( targetElement, touchEvent, dragEvent, cancelable, document.defaultView, dataTransfer, relatedTarget );\n    const cancelled = !targetElement.dispatchEvent( leaveEvt );\n\n    dataStore._mode = DragDataStoreMode._DISCONNECTED;\n\n    if( DEBUG ) {\n        targetElement.classList.remove( debug_class_event_target );\n        if( relatedTarget ) {\n            relatedTarget.classList.remove( debug_class_event_related_target );\n        }\n    }\n\n    return cancelled;\n}\n\n/**\n * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n */\nfunction determineDragOperation( effectAllowed:string, dropEffect:string ):string {\n\n    // unitialized or all\n    if( !effectAllowed || effectAllowed === ALLOWED_EFFECTS[ 7 ] ) {\n        return dropEffect;\n    }\n\n    if( dropEffect === DROP_EFFECTS[ DROP_EFFECT.COPY ] ) {\n        if( effectAllowed.indexOf( DROP_EFFECTS[ DROP_EFFECT.COPY ] ) === 0 ) {\n            return DROP_EFFECTS[ DROP_EFFECT.COPY ];\n        }\n    }\n    else if( dropEffect === DROP_EFFECTS[ DROP_EFFECT.LINK ] ) {\n        if( effectAllowed.indexOf( DROP_EFFECTS[ DROP_EFFECT.LINK ] ) === 0 || effectAllowed.indexOf( \"Link\" ) > -1 ) {\n            return DROP_EFFECTS[ DROP_EFFECT.LINK ];\n        }\n    }\n    else if( dropEffect === DROP_EFFECTS[ DROP_EFFECT.MOVE ] ) {\n        if( effectAllowed.indexOf( DROP_EFFECTS[ DROP_EFFECT.MOVE ] ) === 0 || effectAllowed.indexOf( \"Move\" ) > -1 ) {\n            return DROP_EFFECTS[ DROP_EFFECT.MOVE ];\n        }\n    }\n\n    return DROP_EFFECTS[ DROP_EFFECT.NONE ];\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"dead dnd spec code\">\n\n/**\n * // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n */\n//public static ElementIsTextDropzone( element:HTMLElement, dragDataStore?:DragDataStore ) {\n//\n//    if( dragDataStore && !dragDataStore.data[ \"text/plain\" ] ) {\n//        return false;\n//    }\n//\n//    if( element.isContentEditable ) {\n//        return true;\n//    }\n//\n//    if( element.tagName === \"TEXTAREA\" ) {\n//        return true;\n//    }\n//\n//    if( element.tagName === \"INPUT\" ) {\n//        if( element.getAttribute( \"type\" ) === \"text\" ) {\n//            return true;\n//        }\n//    }\n//\n//    return false;\n//}\n\n/**\n * NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n *\n * Helper method for recursively go from a nested element up the ancestor chain\n * to see if any element has a dropzone.\n */\n//private static FindDropzoneElement( element:HTMLElement ):HTMLElement {\n//\n//    if( !element || !element.hasAttribute || typeof element.hasAttribute !== \"function\" ) {\n//        return null;\n//    }\n//\n//    if( element.hasAttribute( \"dropzone\" ) ) {\n//        return element;\n//    }\n//\n//    if( element === window.document.body ) {\n//        return null;\n//    }\n//\n//    return DragOperationController.FindDropzoneElement( element.parentElement );\n//}\n\n/**\n * NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n *\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#the-dropzone-attribute\n * by implementing the dropzone processing steps.\n */\n//private static GetOperationForMatchingDropzone( element:HTMLElement, dragDataStore:DragDataStore ):string {\n\n// If the current target element is an element with a dropzone attribute that matches the drag data store and specifies an operation\n//      Set the current drag operation to the operation specified by the dropzone attribute of the current target element.\n// If the current target element is an element with a dropzone attribute that matches the drag data store and does not specify an operation\n//      Set the current drag operation to \"copy\".\n// Otherwise\n//      Reset the current drag operation to \"none\".\n//var value = element.getAttribute( \"dropzone\" );\n//if( !value ) {\n//\n//    return \"none\";\n//}\n//\n//var matched = false;\n//var operation;\n//var keywords = value.split( \" \" );\n//\n//for( var i:number = 0; i < keywords.length; i++ ) {\n//    var keyword = keywords[ i ];\n//\n//    if( keyword === \"copy\" || keyword === \"move\" || keyword === \"link\" ) {\n//        if( !operation ) {\n//            operation = keyword;\n//        }\n//        continue;\n//    }\n//\n//    if( keyword.length < 3 || keyword[ 1 ] !== \":\" ) {\n//        continue;\n//    }\n//\n//    var splitKeyword = keyword.split( \":\" );\n//    var kind = splitKeyword[ 0 ].toLowerCase();\n//    var type = splitKeyword[ 1 ].toLowerCase();\n//\n//    if( dragDataStore.types.indexOf( type ) > -1 ) {\n//        matched = true;\n//    }\n//}\n//\n//if( !matched ) {\n//    return \"none\";\n//}\n//\n//if( !operation ) {\n//    return \"copy\";\n//}\n//\n//return operation;\n//}\n\n//</editor-fold>\n\nexport const DragDropPolyfill = {\n    DEBUG: DEBUG,\n    Initialize: Initialize\n};\n\n"]}